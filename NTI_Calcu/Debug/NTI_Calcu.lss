
NTI_Calcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00002a46  00002aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e9c  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6f  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000055f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005757  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000058e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000792b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000099b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1a 11 	call	0x2234	; 0x2234 <main>
      7a:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e7       	ldi	r26, 0x71	; 113
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e7       	ldi	r24, 0x71	; 113
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	61 e7       	ldi	r22, 0x71	; 113
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <CLCD_voidInit>:
#include "CLCD_config.h"
#include "CLCD_private.h"


void CLCD_voidInit(void)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	cc 54       	subi	r28, 0x4C	; 76
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	fe 01       	movw	r30, r28
     caa:	e7 5b       	subi	r30, 0xB7	; 183
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e2       	ldi	r26, 0x20	; 32
     cb4:	b2 e4       	ldi	r27, 0x42	; 66
     cb6:	80 83       	st	Z, r24
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	a2 83       	std	Z+2, r26	; 0x02
     cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	8e 01       	movw	r16, r28
     cc0:	0b 5b       	subi	r16, 0xBB	; 187
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	fe 01       	movw	r30, r28
     cc6:	e7 5b       	subi	r30, 0xB7	; 183
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e7       	ldi	r20, 0x7A	; 122
     cd8:	55 e4       	ldi	r21, 0x45	; 69
     cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 83       	st	Z, r24
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	a2 83       	std	Z+2, r26	; 0x02
     cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cec:	fe 01       	movw	r30, r28
     cee:	eb 5b       	subi	r30, 0xBB	; 187
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	93 81       	ldd	r25, Z+3	; 0x03
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	44 f4       	brge	.+16     	; 0xd1a <CLCD_voidInit+0x8c>
		__ticks = 1;
     d0a:	fe 01       	movw	r30, r28
     d0c:	ed 5b       	subi	r30, 0xBD	; 189
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	64 c0       	rjmp	.+200    	; 0xde2 <CLCD_voidInit+0x154>
	else if (__tmp > 65535)
     d1a:	fe 01       	movw	r30, r28
     d1c:	eb 5b       	subi	r30, 0xBB	; 187
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	0c f0       	brlt	.+2      	; 0xd3a <CLCD_voidInit+0xac>
     d38:	43 c0       	rjmp	.+134    	; 0xdc0 <CLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	fe 01       	movw	r30, r28
     d3c:	e7 5b       	subi	r30, 0xB7	; 183
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8e 01       	movw	r16, r28
     d5a:	0d 5b       	subi	r16, 0xBD	; 189
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	f8 01       	movw	r30, r16
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
     d70:	1f c0       	rjmp	.+62     	; 0xdb0 <CLCD_voidInit+0x122>
     d72:	fe 01       	movw	r30, r28
     d74:	ef 5b       	subi	r30, 0xBF	; 191
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 e9       	ldi	r24, 0x90	; 144
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d80:	fe 01       	movw	r30, r28
     d82:	ef 5b       	subi	r30, 0xBF	; 191
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidInit+0xfc>
     d8e:	fe 01       	movw	r30, r28
     d90:	ef 5b       	subi	r30, 0xBF	; 191
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d98:	de 01       	movw	r26, r28
     d9a:	ad 5b       	subi	r26, 0xBD	; 189
     d9c:	bf 4f       	sbci	r27, 0xFF	; 255
     d9e:	fe 01       	movw	r30, r28
     da0:	ed 5b       	subi	r30, 0xBD	; 189
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	11 96       	adiw	r26, 0x01	; 1
     dac:	9c 93       	st	X, r25
     dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	fe 01       	movw	r30, r28
     db2:	ed 5b       	subi	r30, 0xBD	; 189
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	d1 f6       	brne	.-76     	; 0xd72 <CLCD_voidInit+0xe4>
     dbe:	24 c0       	rjmp	.+72     	; 0xe08 <CLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc0:	8e 01       	movw	r16, r28
     dc2:	0d 5b       	subi	r16, 0xBD	; 189
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	fe 01       	movw	r30, r28
     dc8:	eb 5b       	subi	r30, 0xBB	; 187
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	f8 01       	movw	r30, r16
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
     de2:	fe 01       	movw	r30, r28
     de4:	ed 5b       	subi	r30, 0xBD	; 189
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	fe 01       	movw	r30, r28
     dee:	ff 96       	adiw	r30, 0x3f	; 63
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	fe 01       	movw	r30, r28
     df6:	ff 96       	adiw	r30, 0x3f	; 63
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <CLCD_voidInit+0x16e>
     e00:	fe 01       	movw	r30, r28
     e02:	ff 96       	adiw	r30, 0x3f	; 63
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
	CLCD_voidSendCommand(1);//0b00000001

#elif CLCD_MODE == CLCD_4BIT_MODE
	_delay_ms(40);
	/*Set 4 bit mode*/
	CLCD_voidSendCommand(0b0010);
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
	/*Function Set*/
	CLCD_voidSendCommand(0b00101000);
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a4 e3       	ldi	r26, 0x34	; 52
     e1a:	b2 e4       	ldi	r27, 0x42	; 66
     e1c:	8b af       	std	Y+59, r24	; 0x3b
     e1e:	9c af       	std	Y+60, r25	; 0x3c
     e20:	ad af       	std	Y+61, r26	; 0x3d
     e22:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e24:	6b ad       	ldd	r22, Y+59	; 0x3b
     e26:	7c ad       	ldd	r23, Y+60	; 0x3c
     e28:	8d ad       	ldd	r24, Y+61	; 0x3d
     e2a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e2c:	2b ea       	ldi	r18, 0xAB	; 171
     e2e:	3a ea       	ldi	r19, 0xAA	; 170
     e30:	4a ea       	ldi	r20, 0xAA	; 170
     e32:	50 e4       	ldi	r21, 0x40	; 64
     e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	8f ab       	std	Y+55, r24	; 0x37
     e3e:	98 af       	std	Y+56, r25	; 0x38
     e40:	a9 af       	std	Y+57, r26	; 0x39
     e42:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e44:	6f a9       	ldd	r22, Y+55	; 0x37
     e46:	78 ad       	ldd	r23, Y+56	; 0x38
     e48:	89 ad       	ldd	r24, Y+57	; 0x39
     e4a:	9a ad       	ldd	r25, Y+58	; 0x3a
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e58:	88 23       	and	r24, r24
     e5a:	1c f4       	brge	.+6      	; 0xe62 <CLCD_voidInit+0x1d4>
		__ticks = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	8e ab       	std	Y+54, r24	; 0x36
     e60:	91 c0       	rjmp	.+290    	; 0xf84 <CLCD_voidInit+0x2f6>
	else if (__tmp > 255)
     e62:	6f a9       	ldd	r22, Y+55	; 0x37
     e64:	78 ad       	ldd	r23, Y+56	; 0x38
     e66:	89 ad       	ldd	r24, Y+57	; 0x39
     e68:	9a ad       	ldd	r25, Y+58	; 0x3a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	53 e4       	ldi	r21, 0x43	; 67
     e72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e76:	18 16       	cp	r1, r24
     e78:	0c f0       	brlt	.+2      	; 0xe7c <CLCD_voidInit+0x1ee>
     e7a:	7b c0       	rjmp	.+246    	; 0xf72 <CLCD_voidInit+0x2e4>
	{
		_delay_ms(__us / 1000.0);
     e7c:	6b ad       	ldd	r22, Y+59	; 0x3b
     e7e:	7c ad       	ldd	r23, Y+60	; 0x3c
     e80:	8d ad       	ldd	r24, Y+61	; 0x3d
     e82:	9e ad       	ldd	r25, Y+62	; 0x3e
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a e7       	ldi	r20, 0x7A	; 122
     e8a:	54 e4       	ldi	r21, 0x44	; 68
     e8c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8a ab       	std	Y+50, r24	; 0x32
     e96:	9b ab       	std	Y+51, r25	; 0x33
     e98:	ac ab       	std	Y+52, r26	; 0x34
     e9a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6a a9       	ldd	r22, Y+50	; 0x32
     e9e:	7b a9       	ldd	r23, Y+51	; 0x33
     ea0:	8c a9       	ldd	r24, Y+52	; 0x34
     ea2:	9d a9       	ldd	r25, Y+53	; 0x35
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	55 e4       	ldi	r21, 0x45	; 69
     eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8e a7       	std	Y+46, r24	; 0x2e
     eb6:	9f a7       	std	Y+47, r25	; 0x2f
     eb8:	a8 ab       	std	Y+48, r26	; 0x30
     eba:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     ebc:	6e a5       	ldd	r22, Y+46	; 0x2e
     ebe:	7f a5       	ldd	r23, Y+47	; 0x2f
     ec0:	88 a9       	ldd	r24, Y+48	; 0x30
     ec2:	99 a9       	ldd	r25, Y+49	; 0x31
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <CLCD_voidInit+0x250>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9d a7       	std	Y+45, r25	; 0x2d
     eda:	8c a7       	std	Y+44, r24	; 0x2c
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <CLCD_voidInit+0x2ce>
	else if (__tmp > 65535)
     ede:	6e a5       	ldd	r22, Y+46	; 0x2e
     ee0:	7f a5       	ldd	r23, Y+47	; 0x2f
     ee2:	88 a9       	ldd	r24, Y+48	; 0x30
     ee4:	99 a9       	ldd	r25, Y+49	; 0x31
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <CLCD_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6a a9       	ldd	r22, Y+50	; 0x32
     ef8:	7b a9       	ldd	r23, Y+51	; 0x33
     efa:	8c a9       	ldd	r24, Y+52	; 0x34
     efc:	9d a9       	ldd	r25, Y+53	; 0x35
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9d a7       	std	Y+45, r25	; 0x2d
     f1c:	8c a7       	std	Y+44, r24	; 0x2c
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <CLCD_voidInit+0x2b0>
     f20:	80 e9       	ldi	r24, 0x90	; 144
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	9b a7       	std	Y+43, r25	; 0x2b
     f26:	8a a7       	std	Y+42, r24	; 0x2a
     f28:	8a a5       	ldd	r24, Y+42	; 0x2a
     f2a:	9b a5       	ldd	r25, Y+43	; 0x2b
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <CLCD_voidInit+0x29e>
     f30:	9b a7       	std	Y+43, r25	; 0x2b
     f32:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8c a5       	ldd	r24, Y+44	; 0x2c
     f36:	9d a5       	ldd	r25, Y+45	; 0x2d
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9d a7       	std	Y+45, r25	; 0x2d
     f3c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8c a5       	ldd	r24, Y+44	; 0x2c
     f40:	9d a5       	ldd	r25, Y+45	; 0x2d
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <CLCD_voidInit+0x292>
     f46:	24 c0       	rjmp	.+72     	; 0xf90 <CLCD_voidInit+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6e a5       	ldd	r22, Y+46	; 0x2e
     f4a:	7f a5       	ldd	r23, Y+47	; 0x2f
     f4c:	88 a9       	ldd	r24, Y+48	; 0x30
     f4e:	99 a9       	ldd	r25, Y+49	; 0x31
     f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9d a7       	std	Y+45, r25	; 0x2d
     f5a:	8c a7       	std	Y+44, r24	; 0x2c
     f5c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f5e:	9d a5       	ldd	r25, Y+45	; 0x2d
     f60:	99 a7       	std	Y+41, r25	; 0x29
     f62:	88 a7       	std	Y+40, r24	; 0x28
     f64:	88 a5       	ldd	r24, Y+40	; 0x28
     f66:	99 a5       	ldd	r25, Y+41	; 0x29
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <CLCD_voidInit+0x2da>
     f6c:	99 a7       	std	Y+41, r25	; 0x29
     f6e:	88 a7       	std	Y+40, r24	; 0x28
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <CLCD_voidInit+0x302>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f72:	6f a9       	ldd	r22, Y+55	; 0x37
     f74:	78 ad       	ldd	r23, Y+56	; 0x38
     f76:	89 ad       	ldd	r24, Y+57	; 0x39
     f78:	9a ad       	ldd	r25, Y+58	; 0x3a
     f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	8e ab       	std	Y+54, r24	; 0x36
     f84:	8e a9       	ldd	r24, Y+54	; 0x36
     f86:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f88:	8f a1       	ldd	r24, Y+39	; 0x27
     f8a:	8a 95       	dec	r24
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <CLCD_voidInit+0x2fc>
     f8e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	//set display on/off control
	CLCD_voidSendCommand(0b00001111);
     f90:	8f e0       	ldi	r24, 0x0F	; 15
     f92:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a4 e3       	ldi	r26, 0x34	; 52
     f9c:	b2 e4       	ldi	r27, 0x42	; 66
     f9e:	8b a3       	std	Y+35, r24	; 0x23
     fa0:	9c a3       	std	Y+36, r25	; 0x24
     fa2:	ad a3       	std	Y+37, r26	; 0x25
     fa4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fa6:	6b a1       	ldd	r22, Y+35	; 0x23
     fa8:	7c a1       	ldd	r23, Y+36	; 0x24
     faa:	8d a1       	ldd	r24, Y+37	; 0x25
     fac:	9e a1       	ldd	r25, Y+38	; 0x26
     fae:	2b ea       	ldi	r18, 0xAB	; 171
     fb0:	3a ea       	ldi	r19, 0xAA	; 170
     fb2:	4a ea       	ldi	r20, 0xAA	; 170
     fb4:	50 e4       	ldi	r21, 0x40	; 64
     fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8f 8f       	std	Y+31, r24	; 0x1f
     fc0:	98 a3       	std	Y+32, r25	; 0x20
     fc2:	a9 a3       	std	Y+33, r26	; 0x21
     fc4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fc6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fc8:	78 a1       	ldd	r23, Y+32	; 0x20
     fca:	89 a1       	ldd	r24, Y+33	; 0x21
     fcc:	9a a1       	ldd	r25, Y+34	; 0x22
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	1c f4       	brge	.+6      	; 0xfe4 <CLCD_voidInit+0x356>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8e 8f       	std	Y+30, r24	; 0x1e
     fe2:	91 c0       	rjmp	.+290    	; 0x1106 <CLCD_voidInit+0x478>
	else if (__tmp > 255)
     fe4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fe6:	78 a1       	ldd	r23, Y+32	; 0x20
     fe8:	89 a1       	ldd	r24, Y+33	; 0x21
     fea:	9a a1       	ldd	r25, Y+34	; 0x22
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	53 e4       	ldi	r21, 0x43	; 67
     ff4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	0c f0       	brlt	.+2      	; 0xffe <CLCD_voidInit+0x370>
     ffc:	7b c0       	rjmp	.+246    	; 0x10f4 <CLCD_voidInit+0x466>
	{
		_delay_ms(__us / 1000.0);
     ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    1000:	7c a1       	ldd	r23, Y+36	; 0x24
    1002:	8d a1       	ldd	r24, Y+37	; 0x25
    1004:	9e a1       	ldd	r25, Y+38	; 0x26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4a e7       	ldi	r20, 0x7A	; 122
    100c:	54 e4       	ldi	r21, 0x44	; 68
    100e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8a 8f       	std	Y+26, r24	; 0x1a
    1018:	9b 8f       	std	Y+27, r25	; 0x1b
    101a:	ac 8f       	std	Y+28, r26	; 0x1c
    101c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1020:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1024:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a e7       	ldi	r20, 0x7A	; 122
    102c:	55 e4       	ldi	r21, 0x45	; 69
    102e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8e 8b       	std	Y+22, r24	; 0x16
    1038:	9f 8b       	std	Y+23, r25	; 0x17
    103a:	a8 8f       	std	Y+24, r26	; 0x18
    103c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    103e:	6e 89       	ldd	r22, Y+22	; 0x16
    1040:	7f 89       	ldd	r23, Y+23	; 0x17
    1042:	88 8d       	ldd	r24, Y+24	; 0x18
    1044:	99 8d       	ldd	r25, Y+25	; 0x19
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <CLCD_voidInit+0x3d2>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9d 8b       	std	Y+21, r25	; 0x15
    105c:	8c 8b       	std	Y+20, r24	; 0x14
    105e:	3f c0       	rjmp	.+126    	; 0x10de <CLCD_voidInit+0x450>
	else if (__tmp > 65535)
    1060:	6e 89       	ldd	r22, Y+22	; 0x16
    1062:	7f 89       	ldd	r23, Y+23	; 0x17
    1064:	88 8d       	ldd	r24, Y+24	; 0x18
    1066:	99 8d       	ldd	r25, Y+25	; 0x19
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <CLCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	6a 8d       	ldd	r22, Y+26	; 0x1a
    107a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    107c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    107e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9d 8b       	std	Y+21, r25	; 0x15
    109e:	8c 8b       	std	Y+20, r24	; 0x14
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <CLCD_voidInit+0x432>
    10a2:	80 e9       	ldi	r24, 0x90	; 144
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	9b 8b       	std	Y+19, r25	; 0x13
    10a8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10aa:	8a 89       	ldd	r24, Y+18	; 0x12
    10ac:	9b 89       	ldd	r25, Y+19	; 0x13
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <CLCD_voidInit+0x420>
    10b2:	9b 8b       	std	Y+19, r25	; 0x13
    10b4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	8c 89       	ldd	r24, Y+20	; 0x14
    10b8:	9d 89       	ldd	r25, Y+21	; 0x15
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9d 8b       	std	Y+21, r25	; 0x15
    10be:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	8c 89       	ldd	r24, Y+20	; 0x14
    10c2:	9d 89       	ldd	r25, Y+21	; 0x15
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <CLCD_voidInit+0x414>
    10c8:	24 c0       	rjmp	.+72     	; 0x1112 <CLCD_voidInit+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6e 89       	ldd	r22, Y+22	; 0x16
    10cc:	7f 89       	ldd	r23, Y+23	; 0x17
    10ce:	88 8d       	ldd	r24, Y+24	; 0x18
    10d0:	99 8d       	ldd	r25, Y+25	; 0x19
    10d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9d 8b       	std	Y+21, r25	; 0x15
    10dc:	8c 8b       	std	Y+20, r24	; 0x14
    10de:	8c 89       	ldd	r24, Y+20	; 0x14
    10e0:	9d 89       	ldd	r25, Y+21	; 0x15
    10e2:	99 8b       	std	Y+17, r25	; 0x11
    10e4:	88 8b       	std	Y+16, r24	; 0x10
    10e6:	88 89       	ldd	r24, Y+16	; 0x10
    10e8:	99 89       	ldd	r25, Y+17	; 0x11
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <CLCD_voidInit+0x45c>
    10ee:	99 8b       	std	Y+17, r25	; 0x11
    10f0:	88 8b       	std	Y+16, r24	; 0x10
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <CLCD_voidInit+0x484>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10f6:	78 a1       	ldd	r23, Y+32	; 0x20
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	9a a1       	ldd	r25, Y+34	; 0x22
    10fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8e 8f       	std	Y+30, r24	; 0x1e
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	8a 95       	dec	r24
    110e:	f1 f7       	brne	.-4      	; 0x110c <CLCD_voidInit+0x47e>
    1110:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(45);
	//set display clear
	CLCD_voidSendCommand(0b00000001);
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a0 e0       	ldi	r26, 0x00	; 0
    111e:	b0 e4       	ldi	r27, 0x40	; 64
    1120:	8b 87       	std	Y+11, r24	; 0x0b
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	ad 87       	std	Y+13, r26	; 0x0d
    1126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4a e7       	ldi	r20, 0x7A	; 122
    1136:	55 e4       	ldi	r21, 0x45	; 69
    1138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8f 83       	std	Y+7, r24	; 0x07
    1142:	98 87       	std	Y+8, r25	; 0x08
    1144:	a9 87       	std	Y+9, r26	; 0x09
    1146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1148:	6f 81       	ldd	r22, Y+7	; 0x07
    114a:	78 85       	ldd	r23, Y+8	; 0x08
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    115c:	88 23       	and	r24, r24
    115e:	2c f4       	brge	.+10     	; 0x116a <CLCD_voidInit+0x4dc>
		__ticks = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <CLCD_voidInit+0x55a>
	else if (__tmp > 65535)
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    117e:	18 16       	cp	r1, r24
    1180:	4c f5       	brge	.+82     	; 0x11d4 <CLCD_voidInit+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1182:	6b 85       	ldd	r22, Y+11	; 0x0b
    1184:	7c 85       	ldd	r23, Y+12	; 0x0c
    1186:	8d 85       	ldd	r24, Y+13	; 0x0d
    1188:	9e 85       	ldd	r25, Y+14	; 0x0e
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e2       	ldi	r20, 0x20	; 32
    1190:	51 e4       	ldi	r21, 0x41	; 65
    1192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <CLCD_voidInit+0x53c>
    11ac:	80 e9       	ldi	r24, 0x90	; 144
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <CLCD_voidInit+0x52a>
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f7       	brne	.-38     	; 0x11ac <CLCD_voidInit+0x51e>
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <CLCD_voidInit+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <CLCD_voidInit+0x566>
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//set entry mode
	CLCD_voidSendCommand(0b00000110);
    11fc:	86 e0       	ldi	r24, 0x06	; 6
    11fe:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>

#endif
}
    1202:	c4 5b       	subi	r28, 0xB4	; 180
    1204:	df 4f       	sbci	r29, 0xFF	; 255
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <CLCD_voidSendCommand>:
	CLCD_voidSendCommand4_bit(0b00000110);

}*/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	eb 97       	sbiw	r28, 0x3b	; 59
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	8b af       	std	Y+59, r24	; 0x3b
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif CLCD_MODE == CLCD_4BIT_MODE

	/*SET RS Pin to LOW For command*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	63 e0       	ldi	r22, 0x03	; 3
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>

	/*Send Higher data*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	62 e0       	ldi	r22, 0x02	; 2
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 e8       	ldi	r26, 0x80	; 128
    124a:	b0 e4       	ldi	r27, 0x40	; 64
    124c:	8d ab       	std	Y+53, r24	; 0x35
    124e:	9e ab       	std	Y+54, r25	; 0x36
    1250:	af ab       	std	Y+55, r26	; 0x37
    1252:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	6d a9       	ldd	r22, Y+53	; 0x35
    1256:	7e a9       	ldd	r23, Y+54	; 0x36
    1258:	8f a9       	ldd	r24, Y+55	; 0x37
    125a:	98 ad       	ldd	r25, Y+56	; 0x38
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a e7       	ldi	r20, 0x7A	; 122
    1262:	55 e4       	ldi	r21, 0x45	; 69
    1264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	89 ab       	std	Y+49, r24	; 0x31
    126e:	9a ab       	std	Y+50, r25	; 0x32
    1270:	ab ab       	std	Y+51, r26	; 0x33
    1272:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <CLCD_voidSendCommand+0x7c>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	98 ab       	std	Y+48, r25	; 0x30
    1292:	8f a7       	std	Y+47, r24	; 0x2f
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <CLCD_voidSendCommand+0xfa>
	else if (__tmp > 65535)
    1296:	69 a9       	ldd	r22, Y+49	; 0x31
    1298:	7a a9       	ldd	r23, Y+50	; 0x32
    129a:	8b a9       	ldd	r24, Y+51	; 0x33
    129c:	9c a9       	ldd	r25, Y+52	; 0x34
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <CLCD_voidSendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	6d a9       	ldd	r22, Y+53	; 0x35
    12b0:	7e a9       	ldd	r23, Y+54	; 0x36
    12b2:	8f a9       	ldd	r24, Y+55	; 0x37
    12b4:	98 ad       	ldd	r25, Y+56	; 0x38
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	98 ab       	std	Y+48, r25	; 0x30
    12d4:	8f a7       	std	Y+47, r24	; 0x2f
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <CLCD_voidSendCommand+0xdc>
    12d8:	80 e9       	ldi	r24, 0x90	; 144
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	9e a7       	std	Y+46, r25	; 0x2e
    12de:	8d a7       	std	Y+45, r24	; 0x2d
    12e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <CLCD_voidSendCommand+0xca>
    12e8:	9e a7       	std	Y+46, r25	; 0x2e
    12ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ee:	98 a9       	ldd	r25, Y+48	; 0x30
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	98 ab       	std	Y+48, r25	; 0x30
    12f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f8:	98 a9       	ldd	r25, Y+48	; 0x30
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <CLCD_voidSendCommand+0xbe>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <CLCD_voidSendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	69 a9       	ldd	r22, Y+49	; 0x31
    1302:	7a a9       	ldd	r23, Y+50	; 0x32
    1304:	8b a9       	ldd	r24, Y+51	; 0x33
    1306:	9c a9       	ldd	r25, Y+52	; 0x34
    1308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	98 ab       	std	Y+48, r25	; 0x30
    1312:	8f a7       	std	Y+47, r24	; 0x2f
    1314:	8f a5       	ldd	r24, Y+47	; 0x2f
    1316:	98 a9       	ldd	r25, Y+48	; 0x30
    1318:	9c a7       	std	Y+44, r25	; 0x2c
    131a:	8b a7       	std	Y+43, r24	; 0x2b
    131c:	8b a5       	ldd	r24, Y+43	; 0x2b
    131e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <CLCD_voidSendCommand+0x106>
    1324:	9c a7       	std	Y+44, r25	; 0x2c
    1326:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(4);
	u8 datah=((Copy_u8Command >>4)&0x07) | (((Copy_u8Command >>4)&(0x08))<<1);
    1328:	8b ad       	ldd	r24, Y+59	; 0x3b
    132a:	82 95       	swap	r24
    132c:	8f 70       	andi	r24, 0x0F	; 15
    132e:	28 2f       	mov	r18, r24
    1330:	27 70       	andi	r18, 0x07	; 7
    1332:	8b ad       	ldd	r24, Y+59	; 0x3b
    1334:	82 95       	swap	r24
    1336:	8f 70       	andi	r24, 0x0F	; 15
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	88 70       	andi	r24, 0x08	; 8
    133e:	90 70       	andi	r25, 0x00	; 0
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	82 2b       	or	r24, r18
    1346:	8a af       	std	Y+58, r24	; 0x3a
	DIO_u8SetPortValue(CLCD_DATA_PORT,datah);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	6a ad       	ldd	r22, Y+58	; 0x3a
    134c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <DIO_u8SetPortValue>
	/*Send Enable Pulse*/

	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 e8       	ldi	r26, 0x80	; 128
    1360:	b0 e4       	ldi	r27, 0x40	; 64
    1362:	8f a3       	std	Y+39, r24	; 0x27
    1364:	98 a7       	std	Y+40, r25	; 0x28
    1366:	a9 a7       	std	Y+41, r26	; 0x29
    1368:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136a:	6f a1       	ldd	r22, Y+39	; 0x27
    136c:	78 a5       	ldd	r23, Y+40	; 0x28
    136e:	89 a5       	ldd	r24, Y+41	; 0x29
    1370:	9a a5       	ldd	r25, Y+42	; 0x2a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4a e7       	ldi	r20, 0x7A	; 122
    1378:	55 e4       	ldi	r21, 0x45	; 69
    137a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	8b a3       	std	Y+35, r24	; 0x23
    1384:	9c a3       	std	Y+36, r25	; 0x24
    1386:	ad a3       	std	Y+37, r26	; 0x25
    1388:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    138a:	6b a1       	ldd	r22, Y+35	; 0x23
    138c:	7c a1       	ldd	r23, Y+36	; 0x24
    138e:	8d a1       	ldd	r24, Y+37	; 0x25
    1390:	9e a1       	ldd	r25, Y+38	; 0x26
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	2c f4       	brge	.+10     	; 0x13ac <CLCD_voidSendCommand+0x192>
		__ticks = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9a a3       	std	Y+34, r25	; 0x22
    13a8:	89 a3       	std	Y+33, r24	; 0x21
    13aa:	3f c0       	rjmp	.+126    	; 0x142a <CLCD_voidSendCommand+0x210>
	else if (__tmp > 65535)
    13ac:	6b a1       	ldd	r22, Y+35	; 0x23
    13ae:	7c a1       	ldd	r23, Y+36	; 0x24
    13b0:	8d a1       	ldd	r24, Y+37	; 0x25
    13b2:	9e a1       	ldd	r25, Y+38	; 0x26
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	4f e7       	ldi	r20, 0x7F	; 127
    13ba:	57 e4       	ldi	r21, 0x47	; 71
    13bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	4c f5       	brge	.+82     	; 0x1416 <CLCD_voidSendCommand+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	6f a1       	ldd	r22, Y+39	; 0x27
    13c6:	78 a5       	ldd	r23, Y+40	; 0x28
    13c8:	89 a5       	ldd	r24, Y+41	; 0x29
    13ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e2       	ldi	r20, 0x20	; 32
    13d2:	51 e4       	ldi	r21, 0x41	; 65
    13d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
    13ec:	0f c0       	rjmp	.+30     	; 0x140c <CLCD_voidSendCommand+0x1f2>
    13ee:	80 e9       	ldi	r24, 0x90	; 144
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	98 a3       	std	Y+32, r25	; 0x20
    13f4:	8f 8f       	std	Y+31, r24	; 0x1f
    13f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f8:	98 a1       	ldd	r25, Y+32	; 0x20
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <CLCD_voidSendCommand+0x1e0>
    13fe:	98 a3       	std	Y+32, r25	; 0x20
    1400:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	89 a1       	ldd	r24, Y+33	; 0x21
    1404:	9a a1       	ldd	r25, Y+34	; 0x22
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	9a a3       	std	Y+34, r25	; 0x22
    140a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140c:	89 a1       	ldd	r24, Y+33	; 0x21
    140e:	9a a1       	ldd	r25, Y+34	; 0x22
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	69 f7       	brne	.-38     	; 0x13ee <CLCD_voidSendCommand+0x1d4>
    1414:	14 c0       	rjmp	.+40     	; 0x143e <CLCD_voidSendCommand+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1416:	6b a1       	ldd	r22, Y+35	; 0x23
    1418:	7c a1       	ldd	r23, Y+36	; 0x24
    141a:	8d a1       	ldd	r24, Y+37	; 0x25
    141c:	9e a1       	ldd	r25, Y+38	; 0x26
    141e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9a a3       	std	Y+34, r25	; 0x22
    1428:	89 a3       	std	Y+33, r24	; 0x21
    142a:	89 a1       	ldd	r24, Y+33	; 0x21
    142c:	9a a1       	ldd	r25, Y+34	; 0x22
    142e:	9e 8f       	std	Y+30, r25	; 0x1e
    1430:	8d 8f       	std	Y+29, r24	; 0x1d
    1432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <CLCD_voidSendCommand+0x21c>
    143a:	9e 8f       	std	Y+30, r25	; 0x1e
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	/*Send Lower data*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e8       	ldi	r26, 0x80	; 128
    144e:	b0 e4       	ldi	r27, 0x40	; 64
    1450:	89 8f       	std	Y+25, r24	; 0x19
    1452:	9a 8f       	std	Y+26, r25	; 0x1a
    1454:	ab 8f       	std	Y+27, r26	; 0x1b
    1456:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	69 8d       	ldd	r22, Y+25	; 0x19
    145a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	55 e4       	ldi	r21, 0x45	; 69
    1468:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8d 8b       	std	Y+21, r24	; 0x15
    1472:	9e 8b       	std	Y+22, r25	; 0x16
    1474:	af 8b       	std	Y+23, r26	; 0x17
    1476:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1478:	6d 89       	ldd	r22, Y+21	; 0x15
    147a:	7e 89       	ldd	r23, Y+22	; 0x16
    147c:	8f 89       	ldd	r24, Y+23	; 0x17
    147e:	98 8d       	ldd	r25, Y+24	; 0x18
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <CLCD_voidSendCommand+0x280>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <CLCD_voidSendCommand+0x2fe>
	else if (__tmp > 65535)
    149a:	6d 89       	ldd	r22, Y+21	; 0x15
    149c:	7e 89       	ldd	r23, Y+22	; 0x16
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 8d       	ldd	r25, Y+24	; 0x18
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <CLCD_voidSendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	69 8d       	ldd	r22, Y+25	; 0x19
    14b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9c 8b       	std	Y+20, r25	; 0x14
    14d8:	8b 8b       	std	Y+19, r24	; 0x13
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <CLCD_voidSendCommand+0x2e0>
    14dc:	80 e9       	ldi	r24, 0x90	; 144
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	89 89       	ldd	r24, Y+17	; 0x11
    14e6:	9a 89       	ldd	r25, Y+18	; 0x12
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <CLCD_voidSendCommand+0x2ce>
    14ec:	9a 8b       	std	Y+18, r25	; 0x12
    14ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8b 89       	ldd	r24, Y+19	; 0x13
    14f2:	9c 89       	ldd	r25, Y+20	; 0x14
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <CLCD_voidSendCommand+0x2c2>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <CLCD_voidSendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9c 8b       	std	Y+20, r25	; 0x14
    1516:	8b 8b       	std	Y+19, r24	; 0x13
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	98 8b       	std	Y+16, r25	; 0x10
    151e:	8f 87       	std	Y+15, r24	; 0x0f
    1520:	8f 85       	ldd	r24, Y+15	; 0x0f
    1522:	98 89       	ldd	r25, Y+16	; 0x10
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <CLCD_voidSendCommand+0x30a>
    1528:	98 8b       	std	Y+16, r25	; 0x10
    152a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4);
	u8 datal=(Copy_u8Command & 0x07) | (((Copy_u8Command)&(0x08))<<1);
    152c:	8b ad       	ldd	r24, Y+59	; 0x3b
    152e:	28 2f       	mov	r18, r24
    1530:	27 70       	andi	r18, 0x07	; 7
    1532:	8b ad       	ldd	r24, Y+59	; 0x3b
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 70       	andi	r24, 0x08	; 8
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	82 2b       	or	r24, r18
    1542:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,datal);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	69 ad       	ldd	r22, Y+57	; 0x39
    1548:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <DIO_u8SetPortValue>
	/*Send Enable Pulse*/

	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e8       	ldi	r26, 0x80	; 128
    155c:	b0 e4       	ldi	r27, 0x40	; 64
    155e:	8b 87       	std	Y+11, r24	; 0x0b
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	ad 87       	std	Y+13, r26	; 0x0d
    1564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4a e7       	ldi	r20, 0x7A	; 122
    1574:	55 e4       	ldi	r21, 0x45	; 69
    1576:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	a9 87       	std	Y+9, r26	; 0x09
    1584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	2c f4       	brge	.+10     	; 0x15a8 <CLCD_voidSendCommand+0x38e>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <CLCD_voidSendCommand+0x40c>
	else if (__tmp > 65535)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	4c f5       	brge	.+82     	; 0x1612 <CLCD_voidSendCommand+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <CLCD_voidSendCommand+0x3ee>
    15ea:	80 e9       	ldi	r24, 0x90	; 144
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <CLCD_voidSendCommand+0x3dc>
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f7       	brne	.-38     	; 0x15ea <CLCD_voidSendCommand+0x3d0>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <CLCD_voidSendCommand+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <CLCD_voidSendCommand+0x418>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

#endif

}
    163a:	eb 96       	adiw	r28, 0x3b	; 59
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <CLCD_voidSendData>:
	_delay_ms(4);
}
 */

void CLCD_voidSendData(u8 Copy_u8Data)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	eb 97       	sbiw	r28, 0x3b	; 59
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	8b af       	std	Y+59, r24	; 0x3b
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif CLCD_MODE == CLCD_4BIT_MODE

	/*SET RS Pin to HIGH For Data*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	63 e0       	ldi	r22, 0x03	; 3
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>

	/*Send Higher data*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e8       	ldi	r26, 0x80	; 128
    167c:	b0 e4       	ldi	r27, 0x40	; 64
    167e:	8d ab       	std	Y+53, r24	; 0x35
    1680:	9e ab       	std	Y+54, r25	; 0x36
    1682:	af ab       	std	Y+55, r26	; 0x37
    1684:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6d a9       	ldd	r22, Y+53	; 0x35
    1688:	7e a9       	ldd	r23, Y+54	; 0x36
    168a:	8f a9       	ldd	r24, Y+55	; 0x37
    168c:	98 ad       	ldd	r25, Y+56	; 0x38
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	55 e4       	ldi	r21, 0x45	; 69
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	89 ab       	std	Y+49, r24	; 0x31
    16a0:	9a ab       	std	Y+50, r25	; 0x32
    16a2:	ab ab       	std	Y+51, r26	; 0x33
    16a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16a6:	69 a9       	ldd	r22, Y+49	; 0x31
    16a8:	7a a9       	ldd	r23, Y+50	; 0x32
    16aa:	8b a9       	ldd	r24, Y+51	; 0x33
    16ac:	9c a9       	ldd	r25, Y+52	; 0x34
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <CLCD_voidSendData+0x7c>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	98 ab       	std	Y+48, r25	; 0x30
    16c4:	8f a7       	std	Y+47, r24	; 0x2f
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <CLCD_voidSendData+0xfa>
	else if (__tmp > 65535)
    16c8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ca:	7a a9       	ldd	r23, Y+50	; 0x32
    16cc:	8b a9       	ldd	r24, Y+51	; 0x33
    16ce:	9c a9       	ldd	r25, Y+52	; 0x34
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <CLCD_voidSendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6d a9       	ldd	r22, Y+53	; 0x35
    16e2:	7e a9       	ldd	r23, Y+54	; 0x36
    16e4:	8f a9       	ldd	r24, Y+55	; 0x37
    16e6:	98 ad       	ldd	r25, Y+56	; 0x38
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <CLCD_voidSendData+0xdc>
    170a:	80 e9       	ldi	r24, 0x90	; 144
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	9e a7       	std	Y+46, r25	; 0x2e
    1710:	8d a7       	std	Y+45, r24	; 0x2d
    1712:	8d a5       	ldd	r24, Y+45	; 0x2d
    1714:	9e a5       	ldd	r25, Y+46	; 0x2e
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <CLCD_voidSendData+0xca>
    171a:	9e a7       	std	Y+46, r25	; 0x2e
    171c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1720:	98 a9       	ldd	r25, Y+48	; 0x30
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	98 ab       	std	Y+48, r25	; 0x30
    1726:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8f a5       	ldd	r24, Y+47	; 0x2f
    172a:	98 a9       	ldd	r25, Y+48	; 0x30
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <CLCD_voidSendData+0xbe>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <CLCD_voidSendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	69 a9       	ldd	r22, Y+49	; 0x31
    1734:	7a a9       	ldd	r23, Y+50	; 0x32
    1736:	8b a9       	ldd	r24, Y+51	; 0x33
    1738:	9c a9       	ldd	r25, Y+52	; 0x34
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
    1746:	8f a5       	ldd	r24, Y+47	; 0x2f
    1748:	98 a9       	ldd	r25, Y+48	; 0x30
    174a:	9c a7       	std	Y+44, r25	; 0x2c
    174c:	8b a7       	std	Y+43, r24	; 0x2b
    174e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1750:	9c a5       	ldd	r25, Y+44	; 0x2c
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <CLCD_voidSendData+0x106>
    1756:	9c a7       	std	Y+44, r25	; 0x2c
    1758:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(4);
	u8 datah=((Copy_u8Data >>4)&0x07) | (((Copy_u8Data >>4)&(0x08))<<1);
    175a:	8b ad       	ldd	r24, Y+59	; 0x3b
    175c:	82 95       	swap	r24
    175e:	8f 70       	andi	r24, 0x0F	; 15
    1760:	28 2f       	mov	r18, r24
    1762:	27 70       	andi	r18, 0x07	; 7
    1764:	8b ad       	ldd	r24, Y+59	; 0x3b
    1766:	82 95       	swap	r24
    1768:	8f 70       	andi	r24, 0x0F	; 15
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	88 70       	andi	r24, 0x08	; 8
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	82 2b       	or	r24, r18
    1778:	8a af       	std	Y+58, r24	; 0x3a
	DIO_u8SetPortValue(CLCD_DATA_PORT,datah);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	6a ad       	ldd	r22, Y+58	; 0x3a
    177e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <DIO_u8SetPortValue>
	/*Send Enable Pulse*/

	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e8       	ldi	r26, 0x80	; 128
    1792:	b0 e4       	ldi	r27, 0x40	; 64
    1794:	8f a3       	std	Y+39, r24	; 0x27
    1796:	98 a7       	std	Y+40, r25	; 0x28
    1798:	a9 a7       	std	Y+41, r26	; 0x29
    179a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6f a1       	ldd	r22, Y+39	; 0x27
    179e:	78 a5       	ldd	r23, Y+40	; 0x28
    17a0:	89 a5       	ldd	r24, Y+41	; 0x29
    17a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8b a3       	std	Y+35, r24	; 0x23
    17b6:	9c a3       	std	Y+36, r25	; 0x24
    17b8:	ad a3       	std	Y+37, r26	; 0x25
    17ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17bc:	6b a1       	ldd	r22, Y+35	; 0x23
    17be:	7c a1       	ldd	r23, Y+36	; 0x24
    17c0:	8d a1       	ldd	r24, Y+37	; 0x25
    17c2:	9e a1       	ldd	r25, Y+38	; 0x26
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <CLCD_voidSendData+0x192>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9a a3       	std	Y+34, r25	; 0x22
    17da:	89 a3       	std	Y+33, r24	; 0x21
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <CLCD_voidSendData+0x210>
	else if (__tmp > 65535)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <CLCD_voidSendData+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6f a1       	ldd	r22, Y+39	; 0x27
    17f8:	78 a5       	ldd	r23, Y+40	; 0x28
    17fa:	89 a5       	ldd	r24, Y+41	; 0x29
    17fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9a a3       	std	Y+34, r25	; 0x22
    181c:	89 a3       	std	Y+33, r24	; 0x21
    181e:	0f c0       	rjmp	.+30     	; 0x183e <CLCD_voidSendData+0x1f2>
    1820:	80 e9       	ldi	r24, 0x90	; 144
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	98 a3       	std	Y+32, r25	; 0x20
    1826:	8f 8f       	std	Y+31, r24	; 0x1f
    1828:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182a:	98 a1       	ldd	r25, Y+32	; 0x20
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <CLCD_voidSendData+0x1e0>
    1830:	98 a3       	std	Y+32, r25	; 0x20
    1832:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	89 a1       	ldd	r24, Y+33	; 0x21
    1836:	9a a1       	ldd	r25, Y+34	; 0x22
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9a a3       	std	Y+34, r25	; 0x22
    183c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	89 a1       	ldd	r24, Y+33	; 0x21
    1840:	9a a1       	ldd	r25, Y+34	; 0x22
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <CLCD_voidSendData+0x1d4>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <CLCD_voidSendData+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	9e 8f       	std	Y+30, r25	; 0x1e
    1862:	8d 8f       	std	Y+29, r24	; 0x1d
    1864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1866:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <CLCD_voidSendData+0x21c>
    186c:	9e 8f       	std	Y+30, r25	; 0x1e
    186e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	/*Send Lower data*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	62 e0       	ldi	r22, 0x02	; 2
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	b0 e4       	ldi	r27, 0x40	; 64
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	55 e4       	ldi	r21, 0x45	; 69
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <CLCD_voidSendData+0x280>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <CLCD_voidSendData+0x2fe>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <CLCD_voidSendData+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <CLCD_voidSendData+0x2e0>
    190e:	80 e9       	ldi	r24, 0x90	; 144
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <CLCD_voidSendData+0x2ce>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <CLCD_voidSendData+0x2c2>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <CLCD_voidSendData+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <CLCD_voidSendData+0x30a>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4);
	u8 datal=(Copy_u8Data & 0x07) | (((Copy_u8Data)&(0x08))<<1);
    195e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1960:	28 2f       	mov	r18, r24
    1962:	27 70       	andi	r18, 0x07	; 7
    1964:	8b ad       	ldd	r24, Y+59	; 0x3b
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	88 70       	andi	r24, 0x08	; 8
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	82 2b       	or	r24, r18
    1974:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,datal);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	69 ad       	ldd	r22, Y+57	; 0x39
    197a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <DIO_u8SetPortValue>
	/*Send Enable Pulse*/

	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e8       	ldi	r26, 0x80	; 128
    198e:	b0 e4       	ldi	r27, 0x40	; 64
    1990:	8b 87       	std	Y+11, r24	; 0x0b
    1992:	9c 87       	std	Y+12, r25	; 0x0c
    1994:	ad 87       	std	Y+13, r26	; 0x0d
    1996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a e7       	ldi	r20, 0x7A	; 122
    19a6:	55 e4       	ldi	r21, 0x45	; 69
    19a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8f 83       	std	Y+7, r24	; 0x07
    19b2:	98 87       	std	Y+8, r25	; 0x08
    19b4:	a9 87       	std	Y+9, r26	; 0x09
    19b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <CLCD_voidSendData+0x38e>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <CLCD_voidSendData+0x40c>
	else if (__tmp > 65535)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <CLCD_voidSendData+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <CLCD_voidSendData+0x3ee>
    1a1c:	80 e9       	ldi	r24, 0x90	; 144
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <CLCD_voidSendData+0x3dc>
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <CLCD_voidSendData+0x3d0>
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <CLCD_voidSendData+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <CLCD_voidSendData+0x418>
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

#endif

}
    1a6c:	eb 96       	adiw	r28, 0x3b	; 59
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <CLCD_voidSendString>:
	_delay_ms(4);

}*/

void CLCD_voidSendString(const char* Copy_pcString)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <CLCD_voidSendString+0x6>
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	9b 83       	std	Y+3, r25	; 0x03
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

#elif CLCD_MODE == CLCD_4BIT_MODE
	u8 Local_u8Counter = 0;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
    1a90:	0e c0       	rjmp	.+28     	; 0x1aae <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] !='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e2 0f       	add	r30, r18
    1aa0:	f3 1f       	adc	r31, r19
    1aa2:	80 81       	ld	r24, Z
    1aa4:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
		Local_u8Counter++;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Counter++;
	}

#elif CLCD_MODE == CLCD_4BIT_MODE
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] !='\0')
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e2 0f       	add	r30, r18
    1abc:	f3 1f       	adc	r31, r19
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	39 f7       	brne	.-50     	; 0x1a92 <CLCD_voidSendString+0x14>
		Local_u8Counter++;
	}

#endif

}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <CLCD_voidGoToXY+0x6>
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	6b 83       	std	Y+3, r22	; 0x03
	/*In case of 20*4 Matrix*/
	/*if you wanted to get back to 16*2 delete third and fourth conditions*/
	u8 Local_u8Address=0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8YPos == 0)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 23       	and	r24, r24
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8XPos;
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <CLCD_voidGoToXY+0x46>
	}
	else if(Copy_u8YPos == 1)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	21 f4       	brne	.+8      	; 0x1afc <CLCD_voidGoToXY+0x2c>
	{
		Local_u8Address = Copy_u8XPos+0x40;
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	80 5c       	subi	r24, 0xC0	; 192
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	0d c0       	rjmp	.+26     	; 0x1b16 <CLCD_voidGoToXY+0x46>
	}
	else if(Copy_u8YPos == 2)
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	21 f4       	brne	.+8      	; 0x1b0a <CLCD_voidGoToXY+0x3a>
	{
		Local_u8Address = Copy_u8XPos+0x14;
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	8c 5e       	subi	r24, 0xEC	; 236
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <CLCD_voidGoToXY+0x46>
	}
	else if(Copy_u8YPos == 3)
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	19 f4       	brne	.+6      	; 0x1b16 <CLCD_voidGoToXY+0x46>
	{
		Local_u8Address = Copy_u8XPos+0x54;
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	8c 5a       	subi	r24, 0xAC	; 172
    1b14:	89 83       	std	Y+1, r24	; 0x01
	}
	/*How to send the desired memory location*/
	/*from the data sheet Send 1Address to the LCD*/
	CLCD_voidSendCommand(Local_u8Address+128);//128 in binary equals to 0b10000000
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	80 58       	subi	r24, 0x80	; 128
    1b1a:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <CLCD_voidWriteSpecialCharacter>:


void CLCD_voidWriteSpecialCharacter(u8* Copy_u8Arr,u8 Copy_u8BlockNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	27 97       	sbiw	r28, 0x07	; 7
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	6d 83       	std	Y+5, r22	; 0x05
    1b44:	4e 83       	std	Y+6, r20	; 0x06
    1b46:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Iterator;
	/*Calculate the CG RAM address whose each block is 8 Byte*/
	Local_u8CGRAMAddress = Copy_u8BlockNumber*8;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CG RAM address command to LCD,With setting bit 6*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);//64 in binary 0b01000000
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 5c       	subi	r24, 0xC0	; 192
    1b60:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>

	/*Loop on the array and send the data or the array to the CGRAM*/

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1b64:	19 82       	std	Y+1, r1	; 0x01
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_u8Arr[Local_u8Iterator]);
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
	/*Send CG RAM address command to LCD,With setting bit 6*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);//64 in binary 0b01000000

	/*Loop on the array and send the data or the array to the CGRAM*/

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	78 f3       	brcs	.-34     	; 0x1b68 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_u8Arr[Local_u8Iterator]);
	}

	/*Go to DDRAM*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <CLCD_voidGoToXY>

	/*Send the data on the DDRAM and the data is called by the Block number*/
	CLCD_voidSendData(Copy_u8BlockNumber);
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>

}
    1b98:	27 96       	adiw	r28, 0x07	; 7
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	6d 97       	sbiw	r28, 0x1d	; 29
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	6d 8b       	std	Y+21, r22	; 0x15
    1bc0:	7e 8b       	std	Y+22, r23	; 0x16
    1bc2:	8f 8b       	std	Y+23, r24	; 0x17
    1bc4:	98 8f       	std	Y+24, r25	; 0x18
	u8 arr[10]="0123456789";//To get the askii value
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	0b 96       	adiw	r24, 0x0b	; 11
    1bca:	9a 8f       	std	Y+26, r25	; 0x1a
    1bcc:	89 8f       	std	Y+25, r24	; 0x19
    1bce:	e0 e6       	ldi	r30, 0x60	; 96
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	fc 8f       	std	Y+28, r31	; 0x1c
    1bd4:	eb 8f       	std	Y+27, r30	; 0x1b
    1bd6:	fa e0       	ldi	r31, 0x0A	; 10
    1bd8:	fd 8f       	std	Y+29, r31	; 0x1d
    1bda:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1bdc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1bde:	00 80       	ld	r0, Z
    1be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	9c 8f       	std	Y+28, r25	; 0x1c
    1be8:	8b 8f       	std	Y+27, r24	; 0x1b
    1bea:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bec:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bee:	00 82       	st	Z, r0
    1bf0:	89 8d       	ldd	r24, Y+25	; 0x19
    1bf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf8:	89 8f       	std	Y+25, r24	; 0x19
    1bfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	9d 8f       	std	Y+29, r25	; 0x1d
    1c00:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1c02:	ee 23       	and	r30, r30
    1c04:	51 f7       	brne	.-44     	; 0x1bda <CLCD_voidWriteNumber+0x30>
	u8 LoopCounter;
	u32 i = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	8e 83       	std	Y+6, r24	; 0x06
    1c10:	9f 83       	std	Y+7, r25	; 0x07
    1c12:	a8 87       	std	Y+8, r26	; 0x08
    1c14:	b9 87       	std	Y+9, r27	; 0x09
	u8 counter=0;//value carry the length of the number
    1c16:	1d 82       	std	Y+5, r1	; 0x05
	u32 number = Copy_u32Number;//To save the number before counting its element
    1c18:	8d 89       	ldd	r24, Y+21	; 0x15
    1c1a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c1c:	af 89       	ldd	r26, Y+23	; 0x17
    1c1e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	ab 83       	std	Y+3, r26	; 0x03
    1c26:	bc 83       	std	Y+4, r27	; 0x04
    1c28:	15 c0       	rjmp	.+42     	; 0x1c54 <CLCD_voidWriteNumber+0xaa>
	/*To count the number required to be displayed*/
	while (Copy_u32Number>0)
	{
		counter++;
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	8f 5f       	subi	r24, 0xFF	; 255
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u32Number =Copy_u32Number/10;
    1c30:	8d 89       	ldd	r24, Y+21	; 0x15
    1c32:	9e 89       	ldd	r25, Y+22	; 0x16
    1c34:	af 89       	ldd	r26, Y+23	; 0x17
    1c36:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c38:	2a e0       	ldi	r18, 0x0A	; 10
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    1c48:	da 01       	movw	r26, r20
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	8d 8b       	std	Y+21, r24	; 0x15
    1c4e:	9e 8b       	std	Y+22, r25	; 0x16
    1c50:	af 8b       	std	Y+23, r26	; 0x17
    1c52:	b8 8f       	std	Y+24, r27	; 0x18
	u8 LoopCounter;
	u32 i = 1;
	u8 counter=0;//value carry the length of the number
	u32 number = Copy_u32Number;//To save the number before counting its element
	/*To count the number required to be displayed*/
	while (Copy_u32Number>0)
    1c54:	8d 89       	ldd	r24, Y+21	; 0x15
    1c56:	9e 89       	ldd	r25, Y+22	; 0x16
    1c58:	af 89       	ldd	r26, Y+23	; 0x17
    1c5a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	a1 05       	cpc	r26, r1
    1c60:	b1 05       	cpc	r27, r1
    1c62:	19 f7       	brne	.-58     	; 0x1c2a <CLCD_voidWriteNumber+0x80>
	{
		counter++;
		Copy_u32Number =Copy_u32Number/10;
	}
	/*To calculate the number to divide */
	for (LoopCounter=counter-1;LoopCounter>0;LoopCounter--)
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	8a 87       	std	Y+10, r24	; 0x0a
    1c6a:	15 c0       	rjmp	.+42     	; 0x1c96 <CLCD_voidWriteNumber+0xec>
	{
		i = i*10;
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	a8 85       	ldd	r26, Y+8	; 0x08
    1c72:	b9 85       	ldd	r27, Y+9	; 0x09
    1c74:	2a e0       	ldi	r18, 0x0A	; 10
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8e 83       	std	Y+6, r24	; 0x06
    1c8a:	9f 83       	std	Y+7, r25	; 0x07
    1c8c:	a8 87       	std	Y+8, r26	; 0x08
    1c8e:	b9 87       	std	Y+9, r27	; 0x09
	{
		counter++;
		Copy_u32Number =Copy_u32Number/10;
	}
	/*To calculate the number to divide */
	for (LoopCounter=counter-1;LoopCounter>0;LoopCounter--)
    1c90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c92:	81 50       	subi	r24, 0x01	; 1
    1c94:	8a 87       	std	Y+10, r24	; 0x0a
    1c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c98:	88 23       	and	r24, r24
    1c9a:	41 f7       	brne	.-48     	; 0x1c6c <CLCD_voidWriteNumber+0xc2>
	{
		i = i*10;
	}

	/*b2sm el rkm w bb3t l askii bta3o*/
	for (LoopCounter=counter;LoopCounter>0;LoopCounter--)
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	8a 87       	std	Y+10, r24	; 0x0a
    1ca0:	36 c0       	rjmp	.+108    	; 0x1d0e <CLCD_voidWriteNumber+0x164>
	{
		CLCD_voidSendData(arr[(number /i)%10]);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ca8:	bc 81       	ldd	r27, Y+4	; 0x04
    1caa:	2e 81       	ldd	r18, Y+6	; 0x06
    1cac:	3f 81       	ldd	r19, Y+7	; 0x07
    1cae:	48 85       	ldd	r20, Y+8	; 0x08
    1cb0:	59 85       	ldd	r21, Y+9	; 0x09
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    1cba:	da 01       	movw	r26, r20
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	2a e0       	ldi	r18, 0x0A	; 10
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	25 5f       	subi	r18, 0xF5	; 245
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	f9 01       	movw	r30, r18
    1cda:	e8 0f       	add	r30, r24
    1cdc:	f9 1f       	adc	r31, r25
    1cde:	80 81       	ld	r24, Z
    1ce0:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
		i=i/10;
    1ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce8:	a8 85       	ldd	r26, Y+8	; 0x08
    1cea:	b9 85       	ldd	r27, Y+9	; 0x09
    1cec:	2a e0       	ldi	r18, 0x0A	; 10
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    1cfc:	da 01       	movw	r26, r20
    1cfe:	c9 01       	movw	r24, r18
    1d00:	8e 83       	std	Y+6, r24	; 0x06
    1d02:	9f 83       	std	Y+7, r25	; 0x07
    1d04:	a8 87       	std	Y+8, r26	; 0x08
    1d06:	b9 87       	std	Y+9, r27	; 0x09
	{
		i = i*10;
	}

	/*b2sm el rkm w bb3t l askii bta3o*/
	for (LoopCounter=counter;LoopCounter>0;LoopCounter--)
    1d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d0a:	81 50       	subi	r24, 0x01	; 1
    1d0c:	8a 87       	std	Y+10, r24	; 0x0a
    1d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d10:	88 23       	and	r24, r24
    1d12:	39 f6       	brne	.-114    	; 0x1ca2 <CLCD_voidWriteNumber+0xf8>
	{
		CLCD_voidSendData(arr[(number /i)%10]);
		i=i/10;
	}
}
    1d14:	6d 96       	adiw	r28, 0x1d	; 29
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <DIO_u8SetPinValue>:
	}
	return Local_u8ErrorState;
}*/

u8 DIO_u8SetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Value)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	28 97       	sbiw	r28, 0x08	; 8
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	6b 83       	std	Y+3, r22	; 0x03
    1d3e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;  //This indicate that there is no error
    1d40:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Value ==DIO_u8PIN_LOW)//LOW
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	88 23       	and	r24, r24
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <DIO_u8SetPinValue+0x24>
    1d48:	77 c0       	rjmp	.+238    	; 0x1e38 <DIO_u8SetPinValue+0x112>
	{
		switch(Copy_u8PORT)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	38 87       	std	Y+8, r19	; 0x08
    1d52:	2f 83       	std	Y+7, r18	; 0x07
    1d54:	8f 81       	ldd	r24, Y+7	; 0x07
    1d56:	98 85       	ldd	r25, Y+8	; 0x08
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	59 f1       	breq	.+86     	; 0x1db4 <DIO_u8SetPinValue+0x8e>
    1d5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d60:	38 85       	ldd	r19, Y+8	; 0x08
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <DIO_u8SetPinValue+0x4c>
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	98 85       	ldd	r25, Y+8	; 0x08
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f0       	breq	.+26     	; 0x1d8a <DIO_u8SetPinValue+0x64>
    1d70:	60 c0       	rjmp	.+192    	; 0x1e32 <DIO_u8SetPinValue+0x10c>
    1d72:	2f 81       	ldd	r18, Y+7	; 0x07
    1d74:	38 85       	ldd	r19, Y+8	; 0x08
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	89 f1       	breq	.+98     	; 0x1dde <DIO_u8SetPinValue+0xb8>
    1d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d7e:	98 85       	ldd	r25, Y+8	; 0x08
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	91 05       	cpc	r25, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <DIO_u8SetPinValue+0x62>
    1d86:	40 c0       	rjmp	.+128    	; 0x1e08 <DIO_u8SetPinValue+0xe2>
    1d88:	54 c0       	rjmp	.+168    	; 0x1e32 <DIO_u8SetPinValue+0x10c>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8PIN);break;
    1d8a:	ab e3       	ldi	r26, 0x3B	; 59
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e3       	ldi	r30, 0x3B	; 59
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <DIO_u8SetPinValue+0x82>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <DIO_u8SetPinValue+0x7e>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	ba c0       	rjmp	.+372    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8PIN);break;
    1db4:	a8 e3       	ldi	r26, 0x38	; 56
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e8 e3       	ldi	r30, 0x38	; 56
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_u8SetPinValue+0xac>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_u8SetPinValue+0xa8>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	a5 c0       	rjmp	.+330    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8PIN);break;
    1dde:	a5 e3       	ldi	r26, 0x35	; 53
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e5 e3       	ldi	r30, 0x35	; 53
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <DIO_u8SetPinValue+0xd6>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <DIO_u8SetPinValue+0xd2>
    1e00:	80 95       	com	r24
    1e02:	84 23       	and	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	90 c0       	rjmp	.+288    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8PIN);break;
    1e08:	a2 e3       	ldi	r26, 0x32	; 50
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e2 e3       	ldi	r30, 0x32	; 50
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8SetPinValue+0x100>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8SetPinValue+0xfc>
    1e2a:	80 95       	com	r24
    1e2c:	84 23       	and	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	7b c0       	rjmp	.+246    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		default:Local_u8ErrorState=1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	78 c0       	rjmp	.+240    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		}
	}
	else if (Copy_u8Value ==DIO_u8PIN_HIGH)//HIGH
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <DIO_u8SetPinValue+0x11a>
    1e3e:	72 c0       	rjmp	.+228    	; 0x1f24 <DIO_u8SetPinValue+0x1fe>
	{
		switch(Copy_u8PORT)
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3e 83       	std	Y+6, r19	; 0x06
    1e48:	2d 83       	std	Y+5, r18	; 0x05
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	91 05       	cpc	r25, r1
    1e52:	49 f1       	breq	.+82     	; 0x1ea6 <DIO_u8SetPinValue+0x180>
    1e54:	2d 81       	ldd	r18, Y+5	; 0x05
    1e56:	3e 81       	ldd	r19, Y+6	; 0x06
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <DIO_u8SetPinValue+0x142>
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	61 f0       	breq	.+24     	; 0x1e7e <DIO_u8SetPinValue+0x158>
    1e66:	5b c0       	rjmp	.+182    	; 0x1f1e <DIO_u8SetPinValue+0x1f8>
    1e68:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	71 f1       	breq	.+92     	; 0x1ece <DIO_u8SetPinValue+0x1a8>
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	91 05       	cpc	r25, r1
    1e7a:	e9 f1       	breq	.+122    	; 0x1ef6 <DIO_u8SetPinValue+0x1d0>
    1e7c:	50 c0       	rjmp	.+160    	; 0x1f1e <DIO_u8SetPinValue+0x1f8>
		{
		case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8PIN);break;
    1e7e:	ab e3       	ldi	r26, 0x3B	; 59
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e3       	ldi	r30, 0x3B	; 59
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_u8SetPinValue+0x176>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_u8SetPinValue+0x172>
    1ea0:	84 2b       	or	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	41 c0       	rjmp	.+130    	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8PIN);break;
    1ea6:	a8 e3       	ldi	r26, 0x38	; 56
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e8 e3       	ldi	r30, 0x38	; 56
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_u8SetPinValue+0x19e>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <DIO_u8SetPinValue+0x19a>
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	2d c0       	rjmp	.+90     	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8PIN);break;
    1ece:	a5 e3       	ldi	r26, 0x35	; 53
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e5 e3       	ldi	r30, 0x35	; 53
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_u8SetPinValue+0x1c6>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_u8SetPinValue+0x1c2>
    1ef0:	84 2b       	or	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	19 c0       	rjmp	.+50     	; 0x1f28 <DIO_u8SetPinValue+0x202>
		case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8PIN);break;
    1ef6:	a2 e3       	ldi	r26, 0x32	; 50
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_u8SetPinValue+0x1ee>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_u8SetPinValue+0x1ea>
    1f18:	84 2b       	or	r24, r20
    1f1a:	8c 93       	st	X, r24
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <DIO_u8SetPinValue+0x202>
		default:Local_u8ErrorState=1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <DIO_u8SetPinValue+0x202>
		}
	}
	else
	{
		Local_u8ErrorState=1; //ERROR
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2a:	28 96       	adiw	r28, 0x08	; 8
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PORT,u8 Copy_u8Value)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <DIO_u8SetPortValue+0x6>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <DIO_u8SetPortValue+0x8>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;  //This indicate that there is no error
    1f4e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PORT)
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	3d 83       	std	Y+5, r19	; 0x05
    1f58:	2c 83       	std	Y+4, r18	; 0x04
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	d1 f0       	breq	.+52     	; 0x1f98 <DIO_u8SetPortValue+0x5c>
    1f64:	2c 81       	ldd	r18, Y+4	; 0x04
    1f66:	3d 81       	ldd	r19, Y+5	; 0x05
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <DIO_u8SetPortValue+0x3c>
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <DIO_u8SetPortValue+0x52>
    1f76:	1f c0       	rjmp	.+62     	; 0x1fb6 <DIO_u8SetPortValue+0x7a>
    1f78:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	81 f0       	breq	.+32     	; 0x1fa2 <DIO_u8SetPortValue+0x66>
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	91 05       	cpc	r25, r1
    1f8a:	81 f0       	breq	.+32     	; 0x1fac <DIO_u8SetPortValue+0x70>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value;break;
    1f8e:	eb e3       	ldi	r30, 0x3B	; 59
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 83       	st	Z, r24
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value;break;
    1f98:	e8 e3       	ldi	r30, 0x38	; 56
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	80 83       	st	Z, r24
    1fa0:	0c c0       	rjmp	.+24     	; 0x1fba <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value;break;
    1fa2:	e5 e3       	ldi	r30, 0x35	; 53
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	80 83       	st	Z, r24
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value;break;
    1fac:	e2 e3       	ldi	r30, 0x32	; 50
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	80 83       	st	Z, r24
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_u8SetPortValue+0x7e>
	default:Local_u8ErrorState=1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN, u8* Copy_pu8Value)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	27 97       	sbiw	r28, 0x07	; 7
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
    1fe2:	6b 83       	std	Y+3, r22	; 0x03
    1fe4:	5d 83       	std	Y+5, r21	; 0x05
    1fe6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;  //This indicate that there is no error
    1fe8:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_pu8Value!=NULL) && (Copy_u8PIN<=DIO_u8PIN7))// Check if the pointer equals to null
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <DIO_GetPinValue+0x28>
    1ff2:	78 c0       	rjmp	.+240    	; 0x20e4 <DIO_GetPinValue+0x118>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	88 30       	cpi	r24, 0x08	; 8
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <DIO_GetPinValue+0x30>
    1ffa:	74 c0       	rjmp	.+232    	; 0x20e4 <DIO_GetPinValue+0x118>
	{
		switch(Copy_u8PORT)
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	3f 83       	std	Y+7, r19	; 0x07
    2004:	2e 83       	std	Y+6, r18	; 0x06
    2006:	4e 81       	ldd	r20, Y+6	; 0x06
    2008:	5f 81       	ldd	r21, Y+7	; 0x07
    200a:	41 30       	cpi	r20, 0x01	; 1
    200c:	51 05       	cpc	r21, r1
    200e:	59 f1       	breq	.+86     	; 0x2066 <DIO_GetPinValue+0x9a>
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	9f 81       	ldd	r25, Y+7	; 0x07
    2014:	82 30       	cpi	r24, 0x02	; 2
    2016:	91 05       	cpc	r25, r1
    2018:	34 f4       	brge	.+12     	; 0x2026 <DIO_GetPinValue+0x5a>
    201a:	2e 81       	ldd	r18, Y+6	; 0x06
    201c:	3f 81       	ldd	r19, Y+7	; 0x07
    201e:	21 15       	cp	r18, r1
    2020:	31 05       	cpc	r19, r1
    2022:	69 f0       	breq	.+26     	; 0x203e <DIO_GetPinValue+0x72>
    2024:	5c c0       	rjmp	.+184    	; 0x20de <DIO_GetPinValue+0x112>
    2026:	4e 81       	ldd	r20, Y+6	; 0x06
    2028:	5f 81       	ldd	r21, Y+7	; 0x07
    202a:	42 30       	cpi	r20, 0x02	; 2
    202c:	51 05       	cpc	r21, r1
    202e:	79 f1       	breq	.+94     	; 0x208e <DIO_GetPinValue+0xc2>
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	9f 81       	ldd	r25, Y+7	; 0x07
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <DIO_GetPinValue+0x70>
    203a:	3d c0       	rjmp	.+122    	; 0x20b6 <DIO_GetPinValue+0xea>
    203c:	50 c0       	rjmp	.+160    	; 0x20de <DIO_GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value=GET_BIT(PINA,Copy_u8PIN);break;
    203e:	e9 e3       	ldi	r30, 0x39	; 57
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a9 01       	movw	r20, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <DIO_GetPinValue+0x8a>
    2052:	55 95       	asr	r21
    2054:	47 95       	ror	r20
    2056:	8a 95       	dec	r24
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <DIO_GetPinValue+0x86>
    205a:	ca 01       	movw	r24, r20
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	ec 81       	ldd	r30, Y+4	; 0x04
    2060:	fd 81       	ldd	r31, Y+5	; 0x05
    2062:	80 83       	st	Z, r24
    2064:	41 c0       	rjmp	.+130    	; 0x20e8 <DIO_GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value=GET_BIT(PINB,Copy_u8PIN);break;
    2066:	e6 e3       	ldi	r30, 0x36	; 54
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a9 01       	movw	r20, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <DIO_GetPinValue+0xb2>
    207a:	55 95       	asr	r21
    207c:	47 95       	ror	r20
    207e:	8a 95       	dec	r24
    2080:	e2 f7       	brpl	.-8      	; 0x207a <DIO_GetPinValue+0xae>
    2082:	ca 01       	movw	r24, r20
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	ec 81       	ldd	r30, Y+4	; 0x04
    2088:	fd 81       	ldd	r31, Y+5	; 0x05
    208a:	80 83       	st	Z, r24
    208c:	2d c0       	rjmp	.+90     	; 0x20e8 <DIO_GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value=GET_BIT(PINC,Copy_u8PIN);break;
    208e:	e3 e3       	ldi	r30, 0x33	; 51
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <DIO_GetPinValue+0xda>
    20a2:	55 95       	asr	r21
    20a4:	47 95       	ror	r20
    20a6:	8a 95       	dec	r24
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <DIO_GetPinValue+0xd6>
    20aa:	ca 01       	movw	r24, r20
    20ac:	81 70       	andi	r24, 0x01	; 1
    20ae:	ec 81       	ldd	r30, Y+4	; 0x04
    20b0:	fd 81       	ldd	r31, Y+5	; 0x05
    20b2:	80 83       	st	Z, r24
    20b4:	19 c0       	rjmp	.+50     	; 0x20e8 <DIO_GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value=GET_BIT(PIND,Copy_u8PIN);break;
    20b6:	e0 e3       	ldi	r30, 0x30	; 48
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <DIO_GetPinValue+0x102>
    20ca:	55 95       	asr	r21
    20cc:	47 95       	ror	r20
    20ce:	8a 95       	dec	r24
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <DIO_GetPinValue+0xfe>
    20d2:	ca 01       	movw	r24, r20
    20d4:	81 70       	andi	r24, 0x01	; 1
    20d6:	ec 81       	ldd	r30, Y+4	; 0x04
    20d8:	fd 81       	ldd	r31, Y+5	; 0x05
    20da:	80 83       	st	Z, r24
    20dc:	05 c0       	rjmp	.+10     	; 0x20e8 <DIO_GetPinValue+0x11c>
		default:Local_u8ErrorState=1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ea:	27 96       	adiw	r28, 0x07	; 7
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <KPD_u8GetPressedKey+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <KPD_u8GetPressedKey+0x8>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM ;Local_u8ColumnIdx++)
    210e:	1a 82       	std	Y+2, r1	; 0x02
    2110:	5e c0       	rjmp	.+188    	; 0x21ce <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate Current column*/
		DIO_u8SetPinValue(KPD_COLUMN_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	fc 01       	movw	r30, r24
    211a:	e3 58       	subi	r30, 0x83	; 131
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	90 81       	ld	r25, Z
    2120:	83 e0       	ldi	r24, 0x03	; 3
    2122:	69 2f       	mov	r22, r25
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	3d c0       	rjmp	.+122    	; 0x21a8 <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current ROW*/
			DIO_GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	fc 01       	movw	r30, r24
    2136:	e7 58       	subi	r30, 0x87	; 135
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	90 81       	ld	r25, Z
    213c:	9e 01       	movw	r18, r28
    213e:	2c 5f       	subi	r18, 0xFC	; 252
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	69 2f       	mov	r22, r25
    2146:	a9 01       	movw	r20, r18
    2148:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <DIO_GetPinValue>

			/*Check if the switch is pressed */
			if (DIO_u8PIN_LOW==Local_u8PinState)
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	88 23       	and	r24, r24
    2150:	41 f5       	brne	.+80     	; 0x21a2 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	48 2f       	mov	r20, r24
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	ca 01       	movw	r24, r20
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
    216c:	fc 01       	movw	r30, r24
    216e:	ef 57       	subi	r30, 0x7F	; 127
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting)until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	fc 01       	movw	r30, r24
    2180:	e7 58       	subi	r30, 0x87	; 135
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	90 81       	ld	r25, Z
    2186:	9e 01       	movw	r18, r28
    2188:	2c 5f       	subi	r18, 0xFC	; 252
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	69 2f       	mov	r22, r25
    2190:	a9 01       	movw	r20, r18
    2192:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <DIO_GetPinValue>
			if (DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling (busy waiting)until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	88 23       	and	r24, r24
    219a:	71 f3       	breq	.-36     	; 0x2178 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	1c c0       	rjmp	.+56     	; 0x21da <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM ;Local_u8ColumnIdx++)
	{
		/*Activate Current column*/
		DIO_u8SetPinValue(KPD_COLUMN_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <KPD_u8GetPressedKey+0xb4>
    21ae:	bf cf       	rjmp	.-130    	; 0x212e <KPD_u8GetPressedKey+0x32>

				return Local_u8PressedKey;
			}
		}
		/*Deactivate current column*/
		DIO_u8SetPinValue(KPD_COLUMN_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	fc 01       	movw	r30, r24
    21b8:	e3 58       	subi	r30, 0x83	; 131
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	90 81       	ld	r25, Z
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	69 2f       	mov	r22, r25
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <DIO_u8SetPinValue>
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0; Local_u8ColumnIdx<COLUMN_NUM ;Local_u8ColumnIdx++)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	08 f4       	brcc	.+2      	; 0x21d6 <KPD_u8GetPressedKey+0xda>
    21d4:	9e cf       	rjmp	.-196    	; 0x2112 <KPD_u8GetPressedKey+0x16>
		/*Deactivate current column*/
		DIO_u8SetPinValue(KPD_COLUMN_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    21f4:	ea e3       	ldi	r30, 0x3A	; 58
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    21fc:	e7 e3       	ldi	r30, 0x37	; 55
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	87 e1       	ldi	r24, 0x17	; 23
    2202:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2204:	e4 e3       	ldi	r30, 0x34	; 52
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    220a:	e1 e3       	ldi	r30, 0x31	; 49
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	88 ee       	ldi	r24, 0xE8	; 232
    2210:	80 83       	st	Z, r24
	
	PORTA=PORTA_INTIAL_VALUE;
    2212:	eb e3       	ldi	r30, 0x3B	; 59
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	10 82       	st	Z, r1
	PORTB=PORTB_INTIAL_VALUE;
    2218:	e8 e3       	ldi	r30, 0x38	; 56
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	10 82       	st	Z, r1
	PORTC=PORTC_INTIAL_VALUE;
    221e:	e5 e3       	ldi	r30, 0x35	; 53
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8f ef       	ldi	r24, 0xFF	; 255
    2224:	80 83       	st	Z, r24
	PORTD=PORTD_INTIAL_VALUE;
    2226:	e2 e3       	ldi	r30, 0x32	; 50
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	88 ee       	ldi	r24, 0xE8	; 232
    222c:	80 83       	st	Z, r24
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <main>:
#include "KPD_interface.h"



int main ()
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	a0 97       	sbiw	r28, 0x20	; 32
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
	u8 flag=0,flag2=0,flag3=0;
    2248:	1c 8e       	std	Y+28, r1	; 0x1c
    224a:	1b 8e       	std	Y+27, r1	; 0x1b
    224c:	1a 8e       	std	Y+26, r1	; 0x1a
	u8 Local_u8Operation;
	u32 Temp,Local_u8Key1=0,Local_u8Key2=0,Local_u8Result,Local_u8Result1,Local_u8Key3=0;
    224e:	19 8a       	std	Y+17, r1	; 0x11
    2250:	1a 8a       	std	Y+18, r1	; 0x12
    2252:	1b 8a       	std	Y+19, r1	; 0x13
    2254:	1c 8a       	std	Y+20, r1	; 0x14
    2256:	1d 86       	std	Y+13, r1	; 0x0d
    2258:	1e 86       	std	Y+14, r1	; 0x0e
    225a:	1f 86       	std	Y+15, r1	; 0x0f
    225c:	18 8a       	std	Y+16, r1	; 0x10
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	1a 82       	std	Y+2, r1	; 0x02
    2262:	1b 82       	std	Y+3, r1	; 0x03
    2264:	1c 82       	std	Y+4, r1	; 0x04
	PORT_voidInit();
    2266:	0e 94 f6 10 	call	0x21ec	; 0x21ec <PORT_voidInit>
	CLCD_voidInit();
    226a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidInit>

	while(1)
	{
		do
		{
			Temp=KPD_u8GetPressedKey();
    226e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <KPD_u8GetPressedKey>
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	8d 8b       	std	Y+21, r24	; 0x15
    227c:	9e 8b       	std	Y+22, r25	; 0x16
    227e:	af 8b       	std	Y+23, r26	; 0x17
    2280:	b8 8f       	std	Y+24, r27	; 0x18
		}while(Temp == 0xff);
    2282:	8d 89       	ldd	r24, Y+21	; 0x15
    2284:	9e 89       	ldd	r25, Y+22	; 0x16
    2286:	af 89       	ldd	r26, Y+23	; 0x17
    2288:	b8 8d       	ldd	r27, Y+24	; 0x18
    228a:	8f 3f       	cpi	r24, 0xFF	; 255
    228c:	91 05       	cpc	r25, r1
    228e:	a1 05       	cpc	r26, r1
    2290:	b1 05       	cpc	r27, r1
    2292:	69 f3       	breq	.-38     	; 0x226e <main+0x3a>


		if ((Temp =='+')||(Temp=='-')||(Temp=='*')||(Temp=='/'))
    2294:	8d 89       	ldd	r24, Y+21	; 0x15
    2296:	9e 89       	ldd	r25, Y+22	; 0x16
    2298:	af 89       	ldd	r26, Y+23	; 0x17
    229a:	b8 8d       	ldd	r27, Y+24	; 0x18
    229c:	8b 32       	cpi	r24, 0x2B	; 43
    229e:	91 05       	cpc	r25, r1
    22a0:	a1 05       	cpc	r26, r1
    22a2:	b1 05       	cpc	r27, r1
    22a4:	e1 f0       	breq	.+56     	; 0x22de <main+0xaa>
    22a6:	8d 89       	ldd	r24, Y+21	; 0x15
    22a8:	9e 89       	ldd	r25, Y+22	; 0x16
    22aa:	af 89       	ldd	r26, Y+23	; 0x17
    22ac:	b8 8d       	ldd	r27, Y+24	; 0x18
    22ae:	8d 32       	cpi	r24, 0x2D	; 45
    22b0:	91 05       	cpc	r25, r1
    22b2:	a1 05       	cpc	r26, r1
    22b4:	b1 05       	cpc	r27, r1
    22b6:	99 f0       	breq	.+38     	; 0x22de <main+0xaa>
    22b8:	8d 89       	ldd	r24, Y+21	; 0x15
    22ba:	9e 89       	ldd	r25, Y+22	; 0x16
    22bc:	af 89       	ldd	r26, Y+23	; 0x17
    22be:	b8 8d       	ldd	r27, Y+24	; 0x18
    22c0:	8a 32       	cpi	r24, 0x2A	; 42
    22c2:	91 05       	cpc	r25, r1
    22c4:	a1 05       	cpc	r26, r1
    22c6:	b1 05       	cpc	r27, r1
    22c8:	51 f0       	breq	.+20     	; 0x22de <main+0xaa>
    22ca:	8d 89       	ldd	r24, Y+21	; 0x15
    22cc:	9e 89       	ldd	r25, Y+22	; 0x16
    22ce:	af 89       	ldd	r26, Y+23	; 0x17
    22d0:	b8 8d       	ldd	r27, Y+24	; 0x18
    22d2:	8f 32       	cpi	r24, 0x2F	; 47
    22d4:	91 05       	cpc	r25, r1
    22d6:	a1 05       	cpc	r26, r1
    22d8:	b1 05       	cpc	r27, r1
    22da:	09 f0       	breq	.+2      	; 0x22de <main+0xaa>
    22dc:	74 c2       	rjmp	.+1256   	; 0x27c6 <main+0x592>
		{
			Local_u8Operation=Temp;
    22de:	8d 89       	ldd	r24, Y+21	; 0x15
    22e0:	89 8f       	std	Y+25, r24	; 0x19
			CLCD_voidSendData(Local_u8Operation);
    22e2:	89 8d       	ldd	r24, Y+25	; 0x19
    22e4:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
			while(1)
			{
				do
				{
					Temp=KPD_u8GetPressedKey();
    22e8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <KPD_u8GetPressedKey>
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e0       	ldi	r26, 0x00	; 0
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	8d 8b       	std	Y+21, r24	; 0x15
    22f6:	9e 8b       	std	Y+22, r25	; 0x16
    22f8:	af 8b       	std	Y+23, r26	; 0x17
    22fa:	b8 8f       	std	Y+24, r27	; 0x18
				}while(Temp == 0xff);
    22fc:	8d 89       	ldd	r24, Y+21	; 0x15
    22fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2300:	af 89       	ldd	r26, Y+23	; 0x17
    2302:	b8 8d       	ldd	r27, Y+24	; 0x18
    2304:	8f 3f       	cpi	r24, 0xFF	; 255
    2306:	91 05       	cpc	r25, r1
    2308:	a1 05       	cpc	r26, r1
    230a:	b1 05       	cpc	r27, r1
    230c:	69 f3       	breq	.-38     	; 0x22e8 <main+0xb4>

				if(Temp =='=')
    230e:	8d 89       	ldd	r24, Y+21	; 0x15
    2310:	9e 89       	ldd	r25, Y+22	; 0x16
    2312:	af 89       	ldd	r26, Y+23	; 0x17
    2314:	b8 8d       	ldd	r27, Y+24	; 0x18
    2316:	8d 33       	cpi	r24, 0x3D	; 61
    2318:	91 05       	cpc	r25, r1
    231a:	a1 05       	cpc	r26, r1
    231c:	b1 05       	cpc	r27, r1
    231e:	09 f0       	breq	.+2      	; 0x2322 <main+0xee>
    2320:	94 c1       	rjmp	.+808    	; 0x264a <main+0x416>
				{
					CLCD_voidSendData(Temp);
    2322:	8d 89       	ldd	r24, Y+21	; 0x15
    2324:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
					switch (Local_u8Operation)
    2328:	89 8d       	ldd	r24, Y+25	; 0x19
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	38 a3       	std	Y+32, r19	; 0x20
    2330:	2f 8f       	std	Y+31, r18	; 0x1f
    2332:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2334:	98 a1       	ldd	r25, Y+32	; 0x20
    2336:	8b 32       	cpi	r24, 0x2B	; 43
    2338:	91 05       	cpc	r25, r1
    233a:	b1 f0       	breq	.+44     	; 0x2368 <main+0x134>
    233c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    233e:	38 a1       	ldd	r19, Y+32	; 0x20
    2340:	2c 32       	cpi	r18, 0x2C	; 44
    2342:	31 05       	cpc	r19, r1
    2344:	34 f4       	brge	.+12     	; 0x2352 <main+0x11e>
    2346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2348:	98 a1       	ldd	r25, Y+32	; 0x20
    234a:	8a 32       	cpi	r24, 0x2A	; 42
    234c:	91 05       	cpc	r25, r1
    234e:	71 f1       	breq	.+92     	; 0x23ac <main+0x178>
    2350:	52 c0       	rjmp	.+164    	; 0x23f6 <main+0x1c2>
    2352:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2354:	38 a1       	ldd	r19, Y+32	; 0x20
    2356:	2d 32       	cpi	r18, 0x2D	; 45
    2358:	31 05       	cpc	r19, r1
    235a:	b9 f0       	breq	.+46     	; 0x238a <main+0x156>
    235c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235e:	98 a1       	ldd	r25, Y+32	; 0x20
    2360:	8f 32       	cpi	r24, 0x2F	; 47
    2362:	91 05       	cpc	r25, r1
    2364:	b1 f1       	breq	.+108    	; 0x23d2 <main+0x19e>
    2366:	47 c0       	rjmp	.+142    	; 0x23f6 <main+0x1c2>
					{
					case '+':Local_u8Result=Local_u8Key1+Local_u8Key2;break;
    2368:	89 89       	ldd	r24, Y+17	; 0x11
    236a:	9a 89       	ldd	r25, Y+18	; 0x12
    236c:	ab 89       	ldd	r26, Y+19	; 0x13
    236e:	bc 89       	ldd	r27, Y+20	; 0x14
    2370:	2d 85       	ldd	r18, Y+13	; 0x0d
    2372:	3e 85       	ldd	r19, Y+14	; 0x0e
    2374:	4f 85       	ldd	r20, Y+15	; 0x0f
    2376:	58 89       	ldd	r21, Y+16	; 0x10
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	a4 1f       	adc	r26, r20
    237e:	b5 1f       	adc	r27, r21
    2380:	89 87       	std	Y+9, r24	; 0x09
    2382:	9a 87       	std	Y+10, r25	; 0x0a
    2384:	ab 87       	std	Y+11, r26	; 0x0b
    2386:	bc 87       	std	Y+12, r27	; 0x0c
    2388:	36 c0       	rjmp	.+108    	; 0x23f6 <main+0x1c2>
					case '-':Local_u8Result=Local_u8Key1-Local_u8Key2;break;
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	9a 89       	ldd	r25, Y+18	; 0x12
    238e:	ab 89       	ldd	r26, Y+19	; 0x13
    2390:	bc 89       	ldd	r27, Y+20	; 0x14
    2392:	2d 85       	ldd	r18, Y+13	; 0x0d
    2394:	3e 85       	ldd	r19, Y+14	; 0x0e
    2396:	4f 85       	ldd	r20, Y+15	; 0x0f
    2398:	58 89       	ldd	r21, Y+16	; 0x10
    239a:	82 1b       	sub	r24, r18
    239c:	93 0b       	sbc	r25, r19
    239e:	a4 0b       	sbc	r26, r20
    23a0:	b5 0b       	sbc	r27, r21
    23a2:	89 87       	std	Y+9, r24	; 0x09
    23a4:	9a 87       	std	Y+10, r25	; 0x0a
    23a6:	ab 87       	std	Y+11, r26	; 0x0b
    23a8:	bc 87       	std	Y+12, r27	; 0x0c
    23aa:	25 c0       	rjmp	.+74     	; 0x23f6 <main+0x1c2>
					case '*':Local_u8Result=Local_u8Key1*Local_u8Key2;break;
    23ac:	89 89       	ldd	r24, Y+17	; 0x11
    23ae:	9a 89       	ldd	r25, Y+18	; 0x12
    23b0:	ab 89       	ldd	r26, Y+19	; 0x13
    23b2:	bc 89       	ldd	r27, Y+20	; 0x14
    23b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    23b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    23b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    23ba:	58 89       	ldd	r21, Y+16	; 0x10
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	89 87       	std	Y+9, r24	; 0x09
    23ca:	9a 87       	std	Y+10, r25	; 0x0a
    23cc:	ab 87       	std	Y+11, r26	; 0x0b
    23ce:	bc 87       	std	Y+12, r27	; 0x0c
    23d0:	12 c0       	rjmp	.+36     	; 0x23f6 <main+0x1c2>
					case '/':Local_u8Result=Local_u8Key1/Local_u8Key2;break;
    23d2:	89 89       	ldd	r24, Y+17	; 0x11
    23d4:	9a 89       	ldd	r25, Y+18	; 0x12
    23d6:	ab 89       	ldd	r26, Y+19	; 0x13
    23d8:	bc 89       	ldd	r27, Y+20	; 0x14
    23da:	2d 85       	ldd	r18, Y+13	; 0x0d
    23dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    23de:	4f 85       	ldd	r20, Y+15	; 0x0f
    23e0:	58 89       	ldd	r21, Y+16	; 0x10
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    23ea:	da 01       	movw	r26, r20
    23ec:	c9 01       	movw	r24, r18
    23ee:	89 87       	std	Y+9, r24	; 0x09
    23f0:	9a 87       	std	Y+10, r25	; 0x0a
    23f2:	ab 87       	std	Y+11, r26	; 0x0b
    23f4:	bc 87       	std	Y+12, r27	; 0x0c
					}
					if (Local_u8Operation=='/' && Local_u8Key2 ==0)
    23f6:	89 8d       	ldd	r24, Y+25	; 0x19
    23f8:	8f 32       	cpi	r24, 0x2F	; 47
    23fa:	69 f4       	brne	.+26     	; 0x2416 <main+0x1e2>
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	af 85       	ldd	r26, Y+15	; 0x0f
    2402:	b8 89       	ldd	r27, Y+16	; 0x10
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	a1 05       	cpc	r26, r1
    2408:	b1 05       	cpc	r27, r1
    240a:	29 f4       	brne	.+10     	; 0x2416 <main+0x1e2>
					{
						CLCD_voidSendString("ERROR");
    240c:	8b e6       	ldi	r24, 0x6B	; 107
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <CLCD_voidSendString>
    2414:	69 cf       	rjmp	.-302    	; 0x22e8 <main+0xb4>
					}
					else
					{
						CLCD_voidWriteNumber(Local_u8Result);
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	ab 85       	ldd	r26, Y+11	; 0x0b
    241c:	bc 85       	ldd	r27, Y+12	; 0x0c
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <CLCD_voidWriteNumber>
						/*if the user wanted to add another number*/

						do
						{
							Temp=KPD_u8GetPressedKey();
    2426:	0e 94 7e 10 	call	0x20fc	; 0x20fc <KPD_u8GetPressedKey>
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	8d 8b       	std	Y+21, r24	; 0x15
    2434:	9e 8b       	std	Y+22, r25	; 0x16
    2436:	af 8b       	std	Y+23, r26	; 0x17
    2438:	b8 8f       	std	Y+24, r27	; 0x18
						}while(Temp == 0xff);
    243a:	8d 89       	ldd	r24, Y+21	; 0x15
    243c:	9e 89       	ldd	r25, Y+22	; 0x16
    243e:	af 89       	ldd	r26, Y+23	; 0x17
    2440:	b8 8d       	ldd	r27, Y+24	; 0x18
    2442:	8f 3f       	cpi	r24, 0xFF	; 255
    2444:	91 05       	cpc	r25, r1
    2446:	a1 05       	cpc	r26, r1
    2448:	b1 05       	cpc	r27, r1
    244a:	69 f3       	breq	.-38     	; 0x2426 <main+0x1f2>

						if (Temp == '@')
    244c:	8d 89       	ldd	r24, Y+21	; 0x15
    244e:	9e 89       	ldd	r25, Y+22	; 0x16
    2450:	af 89       	ldd	r26, Y+23	; 0x17
    2452:	b8 8d       	ldd	r27, Y+24	; 0x18
    2454:	80 34       	cpi	r24, 0x40	; 64
    2456:	91 05       	cpc	r25, r1
    2458:	a1 05       	cpc	r26, r1
    245a:	b1 05       	cpc	r27, r1
    245c:	21 f4       	brne	.+8      	; 0x2466 <main+0x232>
						{
							CLCD_voidSendCommand(1);
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
    2464:	41 cf       	rjmp	.-382    	; 0x22e8 <main+0xb4>
						}
						else if((Temp =='+')||(Temp=='-')||(Temp=='*')||(Temp=='/'))
    2466:	8d 89       	ldd	r24, Y+21	; 0x15
    2468:	9e 89       	ldd	r25, Y+22	; 0x16
    246a:	af 89       	ldd	r26, Y+23	; 0x17
    246c:	b8 8d       	ldd	r27, Y+24	; 0x18
    246e:	8b 32       	cpi	r24, 0x2B	; 43
    2470:	91 05       	cpc	r25, r1
    2472:	a1 05       	cpc	r26, r1
    2474:	b1 05       	cpc	r27, r1
    2476:	e1 f0       	breq	.+56     	; 0x24b0 <main+0x27c>
    2478:	8d 89       	ldd	r24, Y+21	; 0x15
    247a:	9e 89       	ldd	r25, Y+22	; 0x16
    247c:	af 89       	ldd	r26, Y+23	; 0x17
    247e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2480:	8d 32       	cpi	r24, 0x2D	; 45
    2482:	91 05       	cpc	r25, r1
    2484:	a1 05       	cpc	r26, r1
    2486:	b1 05       	cpc	r27, r1
    2488:	99 f0       	breq	.+38     	; 0x24b0 <main+0x27c>
    248a:	8d 89       	ldd	r24, Y+21	; 0x15
    248c:	9e 89       	ldd	r25, Y+22	; 0x16
    248e:	af 89       	ldd	r26, Y+23	; 0x17
    2490:	b8 8d       	ldd	r27, Y+24	; 0x18
    2492:	8a 32       	cpi	r24, 0x2A	; 42
    2494:	91 05       	cpc	r25, r1
    2496:	a1 05       	cpc	r26, r1
    2498:	b1 05       	cpc	r27, r1
    249a:	51 f0       	breq	.+20     	; 0x24b0 <main+0x27c>
    249c:	8d 89       	ldd	r24, Y+21	; 0x15
    249e:	9e 89       	ldd	r25, Y+22	; 0x16
    24a0:	af 89       	ldd	r26, Y+23	; 0x17
    24a2:	b8 8d       	ldd	r27, Y+24	; 0x18
    24a4:	8f 32       	cpi	r24, 0x2F	; 47
    24a6:	91 05       	cpc	r25, r1
    24a8:	a1 05       	cpc	r26, r1
    24aa:	b1 05       	cpc	r27, r1
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <main+0x27c>
    24ae:	1c cf       	rjmp	.-456    	; 0x22e8 <main+0xb4>
						{
							CLCD_voidSendCommand(1);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
							CLCD_voidWriteNumber(Local_u8Result);
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    24bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <CLCD_voidWriteNumber>
							Local_u8Operation=Temp;
    24c6:	8d 89       	ldd	r24, Y+21	; 0x15
    24c8:	89 8f       	std	Y+25, r24	; 0x19
							CLCD_voidSendData(Local_u8Operation);
    24ca:	89 8d       	ldd	r24, Y+25	; 0x19
    24cc:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>

							while(1)
							{
								do
								{
									Temp=KPD_u8GetPressedKey();
    24d0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <KPD_u8GetPressedKey>
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	8d 8b       	std	Y+21, r24	; 0x15
    24de:	9e 8b       	std	Y+22, r25	; 0x16
    24e0:	af 8b       	std	Y+23, r26	; 0x17
    24e2:	b8 8f       	std	Y+24, r27	; 0x18
								}while(Temp == 0xff);
    24e4:	8d 89       	ldd	r24, Y+21	; 0x15
    24e6:	9e 89       	ldd	r25, Y+22	; 0x16
    24e8:	af 89       	ldd	r26, Y+23	; 0x17
    24ea:	b8 8d       	ldd	r27, Y+24	; 0x18
    24ec:	8f 3f       	cpi	r24, 0xFF	; 255
    24ee:	91 05       	cpc	r25, r1
    24f0:	a1 05       	cpc	r26, r1
    24f2:	b1 05       	cpc	r27, r1
    24f4:	69 f3       	breq	.-38     	; 0x24d0 <main+0x29c>

								if(Temp =='=')
    24f6:	8d 89       	ldd	r24, Y+21	; 0x15
    24f8:	9e 89       	ldd	r25, Y+22	; 0x16
    24fa:	af 89       	ldd	r26, Y+23	; 0x17
    24fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    24fe:	8d 33       	cpi	r24, 0x3D	; 61
    2500:	91 05       	cpc	r25, r1
    2502:	a1 05       	cpc	r26, r1
    2504:	b1 05       	cpc	r27, r1
    2506:	09 f0       	breq	.+2      	; 0x250a <main+0x2d6>
    2508:	93 c0       	rjmp	.+294    	; 0x2630 <main+0x3fc>
								{
									CLCD_voidSendData(Temp);
    250a:	8d 89       	ldd	r24, Y+21	; 0x15
    250c:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>

									switch (Local_u8Operation)
    2510:	89 8d       	ldd	r24, Y+25	; 0x19
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	3e 8f       	std	Y+30, r19	; 0x1e
    2518:	2d 8f       	std	Y+29, r18	; 0x1d
    251a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251e:	8b 32       	cpi	r24, 0x2B	; 43
    2520:	91 05       	cpc	r25, r1
    2522:	b1 f0       	breq	.+44     	; 0x2550 <main+0x31c>
    2524:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2526:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2528:	2c 32       	cpi	r18, 0x2C	; 44
    252a:	31 05       	cpc	r19, r1
    252c:	34 f4       	brge	.+12     	; 0x253a <main+0x306>
    252e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2530:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2532:	8a 32       	cpi	r24, 0x2A	; 42
    2534:	91 05       	cpc	r25, r1
    2536:	71 f1       	breq	.+92     	; 0x2594 <main+0x360>
    2538:	52 c0       	rjmp	.+164    	; 0x25de <main+0x3aa>
    253a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    253c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    253e:	2d 32       	cpi	r18, 0x2D	; 45
    2540:	31 05       	cpc	r19, r1
    2542:	b9 f0       	breq	.+46     	; 0x2572 <main+0x33e>
    2544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2546:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2548:	8f 32       	cpi	r24, 0x2F	; 47
    254a:	91 05       	cpc	r25, r1
    254c:	b1 f1       	breq	.+108    	; 0x25ba <main+0x386>
    254e:	47 c0       	rjmp	.+142    	; 0x25de <main+0x3aa>
									{
									case '+':Local_u8Result1=Local_u8Result+Local_u8Key3;break;
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	ab 85       	ldd	r26, Y+11	; 0x0b
    2556:	bc 85       	ldd	r27, Y+12	; 0x0c
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	3a 81       	ldd	r19, Y+2	; 0x02
    255c:	4b 81       	ldd	r20, Y+3	; 0x03
    255e:	5c 81       	ldd	r21, Y+4	; 0x04
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	a4 1f       	adc	r26, r20
    2566:	b5 1f       	adc	r27, r21
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	af 83       	std	Y+7, r26	; 0x07
    256e:	b8 87       	std	Y+8, r27	; 0x08
    2570:	36 c0       	rjmp	.+108    	; 0x25de <main+0x3aa>
									case '-':Local_u8Result1=Local_u8Result-Local_u8Key3;break;
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	ab 85       	ldd	r26, Y+11	; 0x0b
    2578:	bc 85       	ldd	r27, Y+12	; 0x0c
    257a:	29 81       	ldd	r18, Y+1	; 0x01
    257c:	3a 81       	ldd	r19, Y+2	; 0x02
    257e:	4b 81       	ldd	r20, Y+3	; 0x03
    2580:	5c 81       	ldd	r21, Y+4	; 0x04
    2582:	82 1b       	sub	r24, r18
    2584:	93 0b       	sbc	r25, r19
    2586:	a4 0b       	sbc	r26, r20
    2588:	b5 0b       	sbc	r27, r21
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	af 83       	std	Y+7, r26	; 0x07
    2590:	b8 87       	std	Y+8, r27	; 0x08
    2592:	25 c0       	rjmp	.+74     	; 0x25de <main+0x3aa>
									case '*':Local_u8Result1=Local_u8Result*Local_u8Key3;break;
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	ab 85       	ldd	r26, Y+11	; 0x0b
    259a:	bc 85       	ldd	r27, Y+12	; 0x0c
    259c:	29 81       	ldd	r18, Y+1	; 0x01
    259e:	3a 81       	ldd	r19, Y+2	; 0x02
    25a0:	4b 81       	ldd	r20, Y+3	; 0x03
    25a2:	5c 81       	ldd	r21, Y+4	; 0x04
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	af 83       	std	Y+7, r26	; 0x07
    25b6:	b8 87       	std	Y+8, r27	; 0x08
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <main+0x3aa>
									case '/':Local_u8Result1=Local_u8Result/Local_u8Key3;break;
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	ab 85       	ldd	r26, Y+11	; 0x0b
    25c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    25c2:	29 81       	ldd	r18, Y+1	; 0x01
    25c4:	3a 81       	ldd	r19, Y+2	; 0x02
    25c6:	4b 81       	ldd	r20, Y+3	; 0x03
    25c8:	5c 81       	ldd	r21, Y+4	; 0x04
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 c8 14 	call	0x2990	; 0x2990 <__udivmodsi4>
    25d2:	da 01       	movw	r26, r20
    25d4:	c9 01       	movw	r24, r18
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	af 83       	std	Y+7, r26	; 0x07
    25dc:	b8 87       	std	Y+8, r27	; 0x08
									}
									CLCD_voidWriteNumber(Local_u8Result1);
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	af 81       	ldd	r26, Y+7	; 0x07
    25e4:	b8 85       	ldd	r27, Y+8	; 0x08
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <CLCD_voidWriteNumber>
									do
									{
										Temp=KPD_u8GetPressedKey();
    25ee:	0e 94 7e 10 	call	0x20fc	; 0x20fc <KPD_u8GetPressedKey>
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e0       	ldi	r26, 0x00	; 0
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	8d 8b       	std	Y+21, r24	; 0x15
    25fc:	9e 8b       	std	Y+22, r25	; 0x16
    25fe:	af 8b       	std	Y+23, r26	; 0x17
    2600:	b8 8f       	std	Y+24, r27	; 0x18
									}while(Temp == 0xff);
    2602:	8d 89       	ldd	r24, Y+21	; 0x15
    2604:	9e 89       	ldd	r25, Y+22	; 0x16
    2606:	af 89       	ldd	r26, Y+23	; 0x17
    2608:	b8 8d       	ldd	r27, Y+24	; 0x18
    260a:	8f 3f       	cpi	r24, 0xFF	; 255
    260c:	91 05       	cpc	r25, r1
    260e:	a1 05       	cpc	r26, r1
    2610:	b1 05       	cpc	r27, r1
    2612:	69 f3       	breq	.-38     	; 0x25ee <main+0x3ba>

									if (Temp == '@')
    2614:	8d 89       	ldd	r24, Y+21	; 0x15
    2616:	9e 89       	ldd	r25, Y+22	; 0x16
    2618:	af 89       	ldd	r26, Y+23	; 0x17
    261a:	b8 8d       	ldd	r27, Y+24	; 0x18
    261c:	80 34       	cpi	r24, 0x40	; 64
    261e:	91 05       	cpc	r25, r1
    2620:	a1 05       	cpc	r26, r1
    2622:	b1 05       	cpc	r27, r1
    2624:	09 f0       	breq	.+2      	; 0x2628 <main+0x3f4>
    2626:	54 cf       	rjmp	.-344    	; 0x24d0 <main+0x29c>
									{
										CLCD_voidSendCommand(1);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	0e 94 0d 09 	call	0x121a	; 0x121a <CLCD_voidSendCommand>
    262e:	50 cf       	rjmp	.-352    	; 0x24d0 <main+0x29c>
									}

								}
								else
								{
									Local_u8Key3=Temp;
    2630:	8d 89       	ldd	r24, Y+21	; 0x15
    2632:	9e 89       	ldd	r25, Y+22	; 0x16
    2634:	af 89       	ldd	r26, Y+23	; 0x17
    2636:	b8 8d       	ldd	r27, Y+24	; 0x18
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	ab 83       	std	Y+3, r26	; 0x03
    263e:	bc 83       	std	Y+4, r27	; 0x04
									CLCD_voidSendData(Local_u8Key3+'0');
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	80 5d       	subi	r24, 0xD0	; 208
    2644:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    2648:	43 cf       	rjmp	.-378    	; 0x24d0 <main+0x29c>
					}

				}
				else
				{
					flag2++;
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	8b 8f       	std	Y+27, r24	; 0x1b
					if (flag2==1)
    2650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	69 f4       	brne	.+26     	; 0x2670 <main+0x43c>
					{
						Local_u8Key2=Temp;
    2656:	8d 89       	ldd	r24, Y+21	; 0x15
    2658:	9e 89       	ldd	r25, Y+22	; 0x16
    265a:	af 89       	ldd	r26, Y+23	; 0x17
    265c:	b8 8d       	ldd	r27, Y+24	; 0x18
    265e:	8d 87       	std	Y+13, r24	; 0x0d
    2660:	9e 87       	std	Y+14, r25	; 0x0e
    2662:	af 87       	std	Y+15, r26	; 0x0f
    2664:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Local_u8Key2+'0');
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	80 5d       	subi	r24, 0xD0	; 208
    266a:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    266e:	3c ce       	rjmp	.-904    	; 0x22e8 <main+0xb4>
					}
					else if(flag2==2)
    2670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	f9 f4       	brne	.+62     	; 0x26b4 <main+0x480>
					{
						Local_u8Key2=(Local_u8Key2*10)+Temp;
    2676:	8d 85       	ldd	r24, Y+13	; 0x0d
    2678:	9e 85       	ldd	r25, Y+14	; 0x0e
    267a:	af 85       	ldd	r26, Y+15	; 0x0f
    267c:	b8 89       	ldd	r27, Y+16	; 0x10
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    268e:	9b 01       	movw	r18, r22
    2690:	ac 01       	movw	r20, r24
    2692:	8d 89       	ldd	r24, Y+21	; 0x15
    2694:	9e 89       	ldd	r25, Y+22	; 0x16
    2696:	af 89       	ldd	r26, Y+23	; 0x17
    2698:	b8 8d       	ldd	r27, Y+24	; 0x18
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	a4 1f       	adc	r26, r20
    26a0:	b5 1f       	adc	r27, r21
    26a2:	8d 87       	std	Y+13, r24	; 0x0d
    26a4:	9e 87       	std	Y+14, r25	; 0x0e
    26a6:	af 87       	std	Y+15, r26	; 0x0f
    26a8:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Temp+'0');
    26aa:	8d 89       	ldd	r24, Y+21	; 0x15
    26ac:	80 5d       	subi	r24, 0xD0	; 208
    26ae:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    26b2:	1a ce       	rjmp	.-972    	; 0x22e8 <main+0xb4>
					}
					else if(flag2==3)
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	83 30       	cpi	r24, 0x03	; 3
    26b8:	f9 f4       	brne	.+62     	; 0x26f8 <main+0x4c4>
					{
						Local_u8Key2=(Local_u8Key2*10)+Temp;
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	af 85       	ldd	r26, Y+15	; 0x0f
    26c0:	b8 89       	ldd	r27, Y+16	; 0x10
    26c2:	2a e0       	ldi	r18, 0x0A	; 10
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    26d2:	9b 01       	movw	r18, r22
    26d4:	ac 01       	movw	r20, r24
    26d6:	8d 89       	ldd	r24, Y+21	; 0x15
    26d8:	9e 89       	ldd	r25, Y+22	; 0x16
    26da:	af 89       	ldd	r26, Y+23	; 0x17
    26dc:	b8 8d       	ldd	r27, Y+24	; 0x18
    26de:	82 0f       	add	r24, r18
    26e0:	93 1f       	adc	r25, r19
    26e2:	a4 1f       	adc	r26, r20
    26e4:	b5 1f       	adc	r27, r21
    26e6:	8d 87       	std	Y+13, r24	; 0x0d
    26e8:	9e 87       	std	Y+14, r25	; 0x0e
    26ea:	af 87       	std	Y+15, r26	; 0x0f
    26ec:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Temp+'0');
    26ee:	8d 89       	ldd	r24, Y+21	; 0x15
    26f0:	80 5d       	subi	r24, 0xD0	; 208
    26f2:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    26f6:	f8 cd       	rjmp	.-1040   	; 0x22e8 <main+0xb4>
					}
					else if(flag2==4)
    26f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fa:	84 30       	cpi	r24, 0x04	; 4
    26fc:	f9 f4       	brne	.+62     	; 0x273c <main+0x508>
					{
						Local_u8Key2=(Local_u8Key2*10)+Temp;
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	af 85       	ldd	r26, Y+15	; 0x0f
    2704:	b8 89       	ldd	r27, Y+16	; 0x10
    2706:	2a e0       	ldi	r18, 0x0A	; 10
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    2716:	9b 01       	movw	r18, r22
    2718:	ac 01       	movw	r20, r24
    271a:	8d 89       	ldd	r24, Y+21	; 0x15
    271c:	9e 89       	ldd	r25, Y+22	; 0x16
    271e:	af 89       	ldd	r26, Y+23	; 0x17
    2720:	b8 8d       	ldd	r27, Y+24	; 0x18
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	a4 1f       	adc	r26, r20
    2728:	b5 1f       	adc	r27, r21
    272a:	8d 87       	std	Y+13, r24	; 0x0d
    272c:	9e 87       	std	Y+14, r25	; 0x0e
    272e:	af 87       	std	Y+15, r26	; 0x0f
    2730:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Temp+'0');
    2732:	8d 89       	ldd	r24, Y+21	; 0x15
    2734:	80 5d       	subi	r24, 0xD0	; 208
    2736:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    273a:	d6 cd       	rjmp	.-1108   	; 0x22e8 <main+0xb4>
					}
					else if(flag2==5)
    273c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273e:	85 30       	cpi	r24, 0x05	; 5
    2740:	f9 f4       	brne	.+62     	; 0x2780 <main+0x54c>
					{
						Local_u8Key2=(Local_u8Key2*10)+Temp;
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	af 85       	ldd	r26, Y+15	; 0x0f
    2748:	b8 89       	ldd	r27, Y+16	; 0x10
    274a:	2a e0       	ldi	r18, 0x0A	; 10
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    275a:	9b 01       	movw	r18, r22
    275c:	ac 01       	movw	r20, r24
    275e:	8d 89       	ldd	r24, Y+21	; 0x15
    2760:	9e 89       	ldd	r25, Y+22	; 0x16
    2762:	af 89       	ldd	r26, Y+23	; 0x17
    2764:	b8 8d       	ldd	r27, Y+24	; 0x18
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	a4 1f       	adc	r26, r20
    276c:	b5 1f       	adc	r27, r21
    276e:	8d 87       	std	Y+13, r24	; 0x0d
    2770:	9e 87       	std	Y+14, r25	; 0x0e
    2772:	af 87       	std	Y+15, r26	; 0x0f
    2774:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Temp+'0');
    2776:	8d 89       	ldd	r24, Y+21	; 0x15
    2778:	80 5d       	subi	r24, 0xD0	; 208
    277a:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    277e:	b4 cd       	rjmp	.-1176   	; 0x22e8 <main+0xb4>
					}
					else if(flag2==6)
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	86 30       	cpi	r24, 0x06	; 6
    2784:	09 f0       	breq	.+2      	; 0x2788 <main+0x554>
    2786:	b0 cd       	rjmp	.-1184   	; 0x22e8 <main+0xb4>
					{
						Local_u8Key2=(Local_u8Key2*10)+Temp;
    2788:	8d 85       	ldd	r24, Y+13	; 0x0d
    278a:	9e 85       	ldd	r25, Y+14	; 0x0e
    278c:	af 85       	ldd	r26, Y+15	; 0x0f
    278e:	b8 89       	ldd	r27, Y+16	; 0x10
    2790:	2a e0       	ldi	r18, 0x0A	; 10
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    27a0:	9b 01       	movw	r18, r22
    27a2:	ac 01       	movw	r20, r24
    27a4:	8d 89       	ldd	r24, Y+21	; 0x15
    27a6:	9e 89       	ldd	r25, Y+22	; 0x16
    27a8:	af 89       	ldd	r26, Y+23	; 0x17
    27aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    27ac:	82 0f       	add	r24, r18
    27ae:	93 1f       	adc	r25, r19
    27b0:	a4 1f       	adc	r26, r20
    27b2:	b5 1f       	adc	r27, r21
    27b4:	8d 87       	std	Y+13, r24	; 0x0d
    27b6:	9e 87       	std	Y+14, r25	; 0x0e
    27b8:	af 87       	std	Y+15, r26	; 0x0f
    27ba:	b8 8b       	std	Y+16, r27	; 0x10
						CLCD_voidSendData(Temp+'0');
    27bc:	8d 89       	ldd	r24, Y+21	; 0x15
    27be:	80 5d       	subi	r24, 0xD0	; 208
    27c0:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    27c4:	91 cd       	rjmp	.-1246   	; 0x22e8 <main+0xb4>
			}

		}
		else
		{
			flag++;
    27c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	8c 8f       	std	Y+28, r24	; 0x1c
			if (flag==1)
    27cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	69 f4       	brne	.+26     	; 0x27ec <main+0x5b8>
			{
				Local_u8Key1=Temp;
    27d2:	8d 89       	ldd	r24, Y+21	; 0x15
    27d4:	9e 89       	ldd	r25, Y+22	; 0x16
    27d6:	af 89       	ldd	r26, Y+23	; 0x17
    27d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    27da:	89 8b       	std	Y+17, r24	; 0x11
    27dc:	9a 8b       	std	Y+18, r25	; 0x12
    27de:	ab 8b       	std	Y+19, r26	; 0x13
    27e0:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidSendData(Local_u8Key1+'0');
    27e2:	89 89       	ldd	r24, Y+17	; 0x11
    27e4:	80 5d       	subi	r24, 0xD0	; 208
    27e6:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    27ea:	41 cd       	rjmp	.-1406   	; 0x226e <main+0x3a>
			}
			else if(flag==2)
    27ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ee:	82 30       	cpi	r24, 0x02	; 2
    27f0:	f9 f4       	brne	.+62     	; 0x2830 <main+0x5fc>
			{
				Local_u8Key1=(Local_u8Key1*10)+Temp;
    27f2:	89 89       	ldd	r24, Y+17	; 0x11
    27f4:	9a 89       	ldd	r25, Y+18	; 0x12
    27f6:	ab 89       	ldd	r26, Y+19	; 0x13
    27f8:	bc 89       	ldd	r27, Y+20	; 0x14
    27fa:	2a e0       	ldi	r18, 0x0A	; 10
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	8d 89       	ldd	r24, Y+21	; 0x15
    2810:	9e 89       	ldd	r25, Y+22	; 0x16
    2812:	af 89       	ldd	r26, Y+23	; 0x17
    2814:	b8 8d       	ldd	r27, Y+24	; 0x18
    2816:	82 0f       	add	r24, r18
    2818:	93 1f       	adc	r25, r19
    281a:	a4 1f       	adc	r26, r20
    281c:	b5 1f       	adc	r27, r21
    281e:	89 8b       	std	Y+17, r24	; 0x11
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	ab 8b       	std	Y+19, r26	; 0x13
    2824:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidSendData(Temp+'0');
    2826:	8d 89       	ldd	r24, Y+21	; 0x15
    2828:	80 5d       	subi	r24, 0xD0	; 208
    282a:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    282e:	1f cd       	rjmp	.-1474   	; 0x226e <main+0x3a>
			}
			else if(flag==3)
    2830:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	f9 f4       	brne	.+62     	; 0x2874 <main+0x640>
			{
				Local_u8Key1=((Local_u8Key1*10))+Temp;
    2836:	89 89       	ldd	r24, Y+17	; 0x11
    2838:	9a 89       	ldd	r25, Y+18	; 0x12
    283a:	ab 89       	ldd	r26, Y+19	; 0x13
    283c:	bc 89       	ldd	r27, Y+20	; 0x14
    283e:	2a e0       	ldi	r18, 0x0A	; 10
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    284e:	9b 01       	movw	r18, r22
    2850:	ac 01       	movw	r20, r24
    2852:	8d 89       	ldd	r24, Y+21	; 0x15
    2854:	9e 89       	ldd	r25, Y+22	; 0x16
    2856:	af 89       	ldd	r26, Y+23	; 0x17
    2858:	b8 8d       	ldd	r27, Y+24	; 0x18
    285a:	82 0f       	add	r24, r18
    285c:	93 1f       	adc	r25, r19
    285e:	a4 1f       	adc	r26, r20
    2860:	b5 1f       	adc	r27, r21
    2862:	89 8b       	std	Y+17, r24	; 0x11
    2864:	9a 8b       	std	Y+18, r25	; 0x12
    2866:	ab 8b       	std	Y+19, r26	; 0x13
    2868:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidSendData(Temp+'0');
    286a:	8d 89       	ldd	r24, Y+21	; 0x15
    286c:	80 5d       	subi	r24, 0xD0	; 208
    286e:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    2872:	fd cc       	rjmp	.-1542   	; 0x226e <main+0x3a>
			}
			else if(flag==4)
    2874:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2876:	84 30       	cpi	r24, 0x04	; 4
    2878:	f9 f4       	brne	.+62     	; 0x28b8 <main+0x684>
			{
				Local_u8Key1=(Local_u8Key1*10)+Temp;
    287a:	89 89       	ldd	r24, Y+17	; 0x11
    287c:	9a 89       	ldd	r25, Y+18	; 0x12
    287e:	ab 89       	ldd	r26, Y+19	; 0x13
    2880:	bc 89       	ldd	r27, Y+20	; 0x14
    2882:	2a e0       	ldi	r18, 0x0A	; 10
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    2892:	9b 01       	movw	r18, r22
    2894:	ac 01       	movw	r20, r24
    2896:	8d 89       	ldd	r24, Y+21	; 0x15
    2898:	9e 89       	ldd	r25, Y+22	; 0x16
    289a:	af 89       	ldd	r26, Y+23	; 0x17
    289c:	b8 8d       	ldd	r27, Y+24	; 0x18
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	a4 1f       	adc	r26, r20
    28a4:	b5 1f       	adc	r27, r21
    28a6:	89 8b       	std	Y+17, r24	; 0x11
    28a8:	9a 8b       	std	Y+18, r25	; 0x12
    28aa:	ab 8b       	std	Y+19, r26	; 0x13
    28ac:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidSendData(Temp+'0');
    28ae:	8d 89       	ldd	r24, Y+21	; 0x15
    28b0:	80 5d       	subi	r24, 0xD0	; 208
    28b2:	0e 94 26 0b 	call	0x164c	; 0x164c <CLCD_voidSendData>
    28b6:	db cc       	rjmp	.-1610   	; 0x226e <main+0x3a>
			}
			else if(flag==5)
    28b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ba:	85 30       	cpi	r24, 0x05	; 5
    28bc:	19 f5       	brne	.+70     	; 0x2904 <main+0x6d0>
			{
				Local_u8Key1=(Local_u8Key1*10)+Temp;
    28be:	89 89       	ldd	r24, Y+17	; 0x11
    28c0:	9a 89       	ldd	r25, Y+18	; 0x12
    28c2:	ab 89       	ldd	r26, Y+19	; 0x13
    28c4:	bc 89       	ldd	r27, Y+20	; 0x14
    28c6:	2a e0       	ldi	r18, 0x0A	; 10
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	8d 89       	ldd	r24, Y+21	; 0x15
    28dc:	9e 89       	ldd	r25, Y+22	; 0x16
    28de:	af 89       	ldd	r26, Y+23	; 0x17
    28e0:	b8 8d       	ldd	r27, Y+24	; 0x18
    28e2:	82 0f       	add	r24, r18
    28e4:	93 1f       	adc	r25, r19
    28e6:	a4 1f       	adc	r26, r20
    28e8:	b5 1f       	adc	r27, r21
    28ea:	89 8b       	std	Y+17, r24	; 0x11
    28ec:	9a 8b       	std	Y+18, r25	; 0x12
    28ee:	ab 8b       	std	Y+19, r26	; 0x13
    28f0:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidWriteNumber(Temp);
    28f2:	8d 89       	ldd	r24, Y+21	; 0x15
    28f4:	9e 89       	ldd	r25, Y+22	; 0x16
    28f6:	af 89       	ldd	r26, Y+23	; 0x17
    28f8:	b8 8d       	ldd	r27, Y+24	; 0x18
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <CLCD_voidWriteNumber>
    2902:	b5 cc       	rjmp	.-1686   	; 0x226e <main+0x3a>
			}
			else if(flag==6)
    2904:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2906:	86 30       	cpi	r24, 0x06	; 6
    2908:	09 f0       	breq	.+2      	; 0x290c <main+0x6d8>
    290a:	b1 cc       	rjmp	.-1694   	; 0x226e <main+0x3a>
			{
				Local_u8Key1=(Local_u8Key1*10)+Temp;
    290c:	89 89       	ldd	r24, Y+17	; 0x11
    290e:	9a 89       	ldd	r25, Y+18	; 0x12
    2910:	ab 89       	ldd	r26, Y+19	; 0x13
    2912:	bc 89       	ldd	r27, Y+20	; 0x14
    2914:	2a e0       	ldi	r18, 0x0A	; 10
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 a9 14 	call	0x2952	; 0x2952 <__mulsi3>
    2924:	9b 01       	movw	r18, r22
    2926:	ac 01       	movw	r20, r24
    2928:	8d 89       	ldd	r24, Y+21	; 0x15
    292a:	9e 89       	ldd	r25, Y+22	; 0x16
    292c:	af 89       	ldd	r26, Y+23	; 0x17
    292e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2930:	82 0f       	add	r24, r18
    2932:	93 1f       	adc	r25, r19
    2934:	a4 1f       	adc	r26, r20
    2936:	b5 1f       	adc	r27, r21
    2938:	89 8b       	std	Y+17, r24	; 0x11
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	ab 8b       	std	Y+19, r26	; 0x13
    293e:	bc 8b       	std	Y+20, r27	; 0x14
				CLCD_voidWriteNumber(Temp);
    2940:	8d 89       	ldd	r24, Y+21	; 0x15
    2942:	9e 89       	ldd	r25, Y+22	; 0x16
    2944:	af 89       	ldd	r26, Y+23	; 0x17
    2946:	b8 8d       	ldd	r27, Y+24	; 0x18
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <CLCD_voidWriteNumber>
    2950:	8e cc       	rjmp	.-1764   	; 0x226e <main+0x3a>

00002952 <__mulsi3>:
    2952:	62 9f       	mul	r22, r18
    2954:	d0 01       	movw	r26, r0
    2956:	73 9f       	mul	r23, r19
    2958:	f0 01       	movw	r30, r0
    295a:	82 9f       	mul	r24, r18
    295c:	e0 0d       	add	r30, r0
    295e:	f1 1d       	adc	r31, r1
    2960:	64 9f       	mul	r22, r20
    2962:	e0 0d       	add	r30, r0
    2964:	f1 1d       	adc	r31, r1
    2966:	92 9f       	mul	r25, r18
    2968:	f0 0d       	add	r31, r0
    296a:	83 9f       	mul	r24, r19
    296c:	f0 0d       	add	r31, r0
    296e:	74 9f       	mul	r23, r20
    2970:	f0 0d       	add	r31, r0
    2972:	65 9f       	mul	r22, r21
    2974:	f0 0d       	add	r31, r0
    2976:	99 27       	eor	r25, r25
    2978:	72 9f       	mul	r23, r18
    297a:	b0 0d       	add	r27, r0
    297c:	e1 1d       	adc	r30, r1
    297e:	f9 1f       	adc	r31, r25
    2980:	63 9f       	mul	r22, r19
    2982:	b0 0d       	add	r27, r0
    2984:	e1 1d       	adc	r30, r1
    2986:	f9 1f       	adc	r31, r25
    2988:	bd 01       	movw	r22, r26
    298a:	cf 01       	movw	r24, r30
    298c:	11 24       	eor	r1, r1
    298e:	08 95       	ret

00002990 <__udivmodsi4>:
    2990:	a1 e2       	ldi	r26, 0x21	; 33
    2992:	1a 2e       	mov	r1, r26
    2994:	aa 1b       	sub	r26, r26
    2996:	bb 1b       	sub	r27, r27
    2998:	fd 01       	movw	r30, r26
    299a:	0d c0       	rjmp	.+26     	; 0x29b6 <__udivmodsi4_ep>

0000299c <__udivmodsi4_loop>:
    299c:	aa 1f       	adc	r26, r26
    299e:	bb 1f       	adc	r27, r27
    29a0:	ee 1f       	adc	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	a2 17       	cp	r26, r18
    29a6:	b3 07       	cpc	r27, r19
    29a8:	e4 07       	cpc	r30, r20
    29aa:	f5 07       	cpc	r31, r21
    29ac:	20 f0       	brcs	.+8      	; 0x29b6 <__udivmodsi4_ep>
    29ae:	a2 1b       	sub	r26, r18
    29b0:	b3 0b       	sbc	r27, r19
    29b2:	e4 0b       	sbc	r30, r20
    29b4:	f5 0b       	sbc	r31, r21

000029b6 <__udivmodsi4_ep>:
    29b6:	66 1f       	adc	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	88 1f       	adc	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	1a 94       	dec	r1
    29c0:	69 f7       	brne	.-38     	; 0x299c <__udivmodsi4_loop>
    29c2:	60 95       	com	r22
    29c4:	70 95       	com	r23
    29c6:	80 95       	com	r24
    29c8:	90 95       	com	r25
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	bd 01       	movw	r22, r26
    29d0:	cf 01       	movw	r24, r30
    29d2:	08 95       	ret

000029d4 <__prologue_saves__>:
    29d4:	2f 92       	push	r2
    29d6:	3f 92       	push	r3
    29d8:	4f 92       	push	r4
    29da:	5f 92       	push	r5
    29dc:	6f 92       	push	r6
    29de:	7f 92       	push	r7
    29e0:	8f 92       	push	r8
    29e2:	9f 92       	push	r9
    29e4:	af 92       	push	r10
    29e6:	bf 92       	push	r11
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	ca 1b       	sub	r28, r26
    29fe:	db 0b       	sbc	r29, r27
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	09 94       	ijmp

00002a0c <__epilogue_restores__>:
    2a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a0e:	39 88       	ldd	r3, Y+17	; 0x11
    2a10:	48 88       	ldd	r4, Y+16	; 0x10
    2a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a20:	c8 84       	ldd	r12, Y+8	; 0x08
    2a22:	df 80       	ldd	r13, Y+7	; 0x07
    2a24:	ee 80       	ldd	r14, Y+6	; 0x06
    2a26:	fd 80       	ldd	r15, Y+5	; 0x05
    2a28:	0c 81       	ldd	r16, Y+4	; 0x04
    2a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a30:	ce 0f       	add	r28, r30
    2a32:	d1 1d       	adc	r29, r1
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	ed 01       	movw	r28, r26
    2a40:	08 95       	ret

00002a42 <_exit>:
    2a42:	f8 94       	cli

00002a44 <__stop_program>:
    2a44:	ff cf       	rjmp	.-2      	; 0x2a44 <__stop_program>
